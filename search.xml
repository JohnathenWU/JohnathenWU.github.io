<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>13.PHP会话控制</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2.PHP/13.PHP%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6.html</url>
    <content><![CDATA[<p>HTTP协议是一个建立在TCP协议上的无状态协议，他在完成了每一次传输之后，就会把连接给断开，Web服务器本身并不知道本次请求和上次请求的对应关系，这样做的好处在于极大的减轻了服务器的压力，但是客户端与服务器进行动态交互的Web应用程序出现之后，HTTP无状态的特性严重阻碍了这些应用程序的实现，毕竟交互是需要承前启后的。</p>
<p>为了解决这个问题，前辈们就决定给每一个客户端办法一个通行证叫做Cookie，无论谁访问都必须携带自己通行证，而服务器为了得知用户的浏览状态，会为特定用户创建了特定的session，用于标示并跟踪这个用户，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。</p>
<hr>
<h1 id="SESSION"><a href="#SESSION" class="headerlink" title="SESSION"></a>SESSION</h1><h2 id="什么是SESSION？"><a href="#什么是SESSION？" class="headerlink" title="什么是SESSION？"></a>什么是SESSION？</h2><p>Session在计算机中，尤其是在网络应用中，称为”会话控制”。</p>
<p>Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。</p>
<p>Session直接翻译成中文比较困难，一般都译成时域。在计算机专业术语中，Session是指一个终端用户与交互系统进行通信的时间间隔，通常指从注册进入系统到注销退出系统之间所经过的时间。以及如果需要的话，可能还有一定的操作空间。</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>设定两个页面，进行跳转</p>
<p>01.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$username = <span class="string">'kinght'</span>;</span><br><span class="line"><span class="keyword">echo</span> $username,<span class="string">'&lt;br&gt;'</span>,<span class="string">'&lt;a href="02.php"&gt;链接到第二页&lt;/a&gt;'</span>;</span><br></pre></td></tr></table></figure>
<p>02.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line"><span class="keyword">echo</span> $username;</span><br></pre></td></tr></table></figure>
<p>我们运行发现跳转之后，02.php并没有能够获取到$username的值<br><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200520153232960.png" alt="image-20200520153232960"></p>
<p>要想能够获取，Session提供了一个PHP脚本中定义全局变量的方法，使这个全局变量对同一个Session下所有的PHP脚本都有效</p>
<p>01.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'username'</span>] = <span class="string">'kinght'</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SESSION[<span class="string">'username'</span>],<span class="string">'&lt;br&gt;'</span>,<span class="string">'&lt;a href="02.php"&gt;链接到第二页&lt;/a&gt;'</span>;</span><br></pre></td></tr></table></figure>
<p>02.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">echo</span> $_SESSION[<span class="string">'username'</span>];</span><br></pre></td></tr></table></figure>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200520153248093.png" alt="image-20200520153248093"></p>
<p>第二个页面就同样能够获取了</p>
<p>简而言之，SESSION通过将数据存储在HTTP服务器中，以在整个用户会话过程中保持该数据</p>
<h2 id="SESSION工作原理"><a href="#SESSION工作原理" class="headerlink" title="SESSION工作原理"></a>SESSION工作原理</h2><p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200520153257211.png" alt="image-20200520153257211"></p>
<ol>
<li>当一个session第一次被启用时，将会初始化一个session文件创建一个sessionID作为标识，所有的session信息将会根据用户的sessionID存放在对应的session文件中</li>
<li>sessionID将会被下发至客户端cookie</li>
<li>客户端的访问将会使sessionID跟随cookie上传，服务端将会根据sessionID号进行session文件读取</li>
<li>如果有客户端的操作，那么新的操作也将被更新到session中存放起来，等待下一次sessionID的调用</li>
<li>最后因为主动删除或超时过期，都将删除session和sessionID，所有的操作记录都会被删除，下一次访问就需要再一次进行步骤1，只要一直使用相同的sessionID值来发送请求，会话就被视为活动的；如果特定会话的请求间隔超过指定的超时值（以秒为单位），则该会话被视为已过期。<h2 id="SESSION相关函数"><a href="#SESSION相关函数" class="headerlink" title="SESSION相关函数"></a>SESSION相关函数</h2></li>
</ol>
<h3 id="session-start"><a href="#session-start" class="headerlink" title="session_start"></a>session_start</h3><p>描述：启动新会话或者重用现有会话</p>
<p>语法：bool session_start([array $options = []])</p>
<p>说明：</p>
<p>A.$options参数是一个关联数组，如果提供的话，则会用其中的项目覆盖“会话配置”中的配置选项；</p>
<p>B.如果通过GET或者POST方式，或者使用cookie提交了会话ID，则会重用现有会话；</p>
<p>回到01.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">session_start();<span class="comment">//开启SESSION会话或使用SESSION会话</span></span><br><span class="line">$_SESSION[<span class="string">'username'</span>] = <span class="string">'kinght'</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SESSION[<span class="string">'username'</span>],<span class="string">'&lt;br&gt;'</span>,<span class="string">'&lt;a href="02.php"&gt;链接到第二页&lt;/a&gt;'</span>;</span><br></pre></td></tr></table></figure>
<p>使用apache运行，浏览器F12打开开发者工具，刷新，在网络中，我们会发现cookie，其中这里直接将会显示sessionID<br><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200520153308373.png" alt="image-20200520153308373"></p>
<p>我们在打开服务器对应的位置就能找到对应的文件(我这里使用的是phpstudy-&gt;apache)</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200520153316785.png" alt="image-20200520153316785"></p>
<p>右键打开这个文件，就能看到储存的值</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200520153327331.png" alt="image-20200520153327331"></p>
<p>下一次访问，就会根据sessionID来读取文件，修改session,他也就会跟着被修改</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200520153334332.png" alt="image-20200520153334332"></p>
<h3 id="session-id"><a href="#session-id" class="headerlink" title="session_id"></a>session_id</h3><p>描述：获取/设置当前会话ID</p>
<p>语法：string session_id([string $id])</p>
<p>说明：</p>
<p>A.如果指定$id参数的值，则使用指定值作为会话ID；</p>
<p>B.必须在调用session_start()函数之前调用session_id()函数；</p>
<p>测试需要重启浏览器或重新创建php文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">session_id(<span class="string">'geek'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'userId'</span>] = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>我们发现sessionID被修改了<br><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200520153348489.png" alt="image-20200520153348489"></p>
<h3 id="session-name"><a href="#session-name" class="headerlink" title="session_name"></a>session_name</h3><p>描述：读取/设置会话名称</p>
<p>语法：string session_name([string $name])</p>
<p>说明：</p>
<p>A.如果指定$name参数，session_name()函数会更新会话名称，并返回原来的会话名称；</p>
<p>B.必须在调用session_start()函数之前调用session_name()函数；</p>
<p>测试需要重启浏览器或重新创建php文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">session_name(<span class="string">'geek'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'userId'</span>] = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200520153357240.png" alt="image-20200520153357240"></p>
<h3 id="session-destroy"><a href="#session-destroy" class="headerlink" title="session_destroy"></a>session_destroy</h3><p>描述：销毁一个会话中的全部数据</p>
<p>语法：bool session_destroy(void)</p>
<p>一般写在注销页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">session_start();</span><br><span class="line">session_destroy();</span><br></pre></td></tr></table></figure>
<p>可是我们会发现运行后，session文件还在，这个就和配置文件垃圾回收的概率配置相关</p>
<h2 id="SESSION的PHP配置文件"><a href="#SESSION的PHP配置文件" class="headerlink" title="SESSION的PHP配置文件"></a>SESSION的PHP配置文件</h2><h3 id="session-auto-start-boolean"><a href="#session-auto-start-boolean" class="headerlink" title="session.auto_start(boolean)"></a>session.auto_start(boolean)</h3><p>描述：session.auto_start指定会话模块是否在请求开始时自动启动。默认为0（不启动）；</p>
<h3 id="session-name-string"><a href="#session-name-string" class="headerlink" title="session.name(string)"></a>session.name(string)</h3><p>描述：指定会话名以用做cookie的名字，只能由字母数字组成，默认为PHPSESSID；</p>
<h3 id="session-save-handler-string"><a href="#session-save-handler-string" class="headerlink" title="session.save_handler(string)"></a>session.save_handler(string)</h3><p>描述：定义用来存储和获取与会话关联的数据的处理器的名字，默认为files；</p>
<h3 id="session-save-path-string"><a href="#session-save-path-string" class="headerlink" title="session.save_path(string)"></a>session.save_path(string)</h3><p>描述：定义传递给存储处理器的参数，如果选择默认的files文件处理器，则值则是文件的路径；</p>
<h3 id="session-gc-maxlifetime-integer"><a href="#session-gc-maxlifetime-integer" class="headerlink" title="session.gc_maxlifetime(integer)"></a>session.gc_maxlifetime(integer)</h3><p>描述：指定过了多少秒之后数据就会被视为“垃圾”并被清除；</p>
<h3 id="session-gc-probability-integer-、session-gc-divisor-integer"><a href="#session-gc-probability-integer-、session-gc-divisor-integer" class="headerlink" title="session.gc_probability(integer)、session.gc_divisor(integer)"></a>session.gc_probability(integer)、session.gc_divisor(integer)</h3><p>描述：定义在每个会话初始化时启动gc（garbagecollection，垃圾回收）进程的概率，此概率通过gc_probability/gc_divisor计算；</p>
<hr>
<h1 id="COOKIE"><a href="#COOKIE" class="headerlink" title="COOKIE"></a>COOKIE</h1><p>HTTPCookie（也叫Webcookie或者浏览器Cookie），它是服务器发送到用户浏览器并保存在浏览器客户端上的一串数据，它会在浏览器下一次发起请求时被HTTP请求携带并发送到服务器上；而且HTTPcookie是HTTP标头的组成部分</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">setcookie(<span class="string">'username'</span>,<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200520153407989.png" alt="image-20200520153407989"></p>
<h2 id="COOKIE的主要用途"><a href="#COOKIE的主要用途" class="headerlink" title="COOKIE的主要用途"></a>COOKIE的主要用途</h2><ol>
<li>会话状态管理（如用户登录状态、购物车）；</li>
<li>个性化设置（如用户自定义设置）；</li>
<li>浏览器行为跟踪（如跟踪分析用户行为）；<h2 id="COOKIE相关函数"><a href="#COOKIE相关函数" class="headerlink" title="COOKIE相关函数"></a>COOKIE相关函数</h2></li>
</ol>
<h3 id="setcookie"><a href="#setcookie" class="headerlink" title="setcookie"></a>setcookie</h3><p>描述：设置cookie</p>
<p>语法：bool setcookie( string $name [, string $value=””[,int $expire=0[,string $path=””[,string $domain=””]]]])</p>
<p>说明：</p>
<ul>
<li>$name参数用于指定cookie名称；</li>
<li>$value参数用于设置cookie值；</li>
<li>$expire参数用于设置cookie的生命周期(Unix时间戳)；</li>
<li>$path参数用于设置服务器上可用cookie的路径；如果设置为”/“，则代表在整个域名内都有效；如果设置为”/foo/“，则仅代表在域名内的/foo目录及其子目录内有效；</li>
<li>$domain参数用于设置cookie可用的域名范围（包含子域名）；<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">date_default_timezone_get(<span class="string">'Asia/Shanghai'</span>);<span class="comment">//设置时区为上海</span></span><br><span class="line">setcookie(<span class="string">'username'</span>,<span class="string">'tom'</span>,tim()+<span class="number">10</span>*<span class="number">86400</span>);<span class="comment">//tim()+10*86400指的是cookie生存周期为10天(一天86400秒)，time为当前时间戳</span></span><br></pre></td></tr></table></figure>
cookie默认存储的位置会因为不同的浏览器而不同。而如果不设置时间戳，浏览器关闭则cookie删除，设置的话被称为持久性cookie</li>
</ul>
]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>2.PHP</category>
        <category>1.PHP基础</category>
      </categories>
      <tags>
        <tag>1.Web开发</tag>
        <tag>2.PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>1.PHP介绍及基础语法格式</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2.PHP/1.PHP%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F.html</url>
    <content><![CDATA[<p>1994年Rasmus Lerdorf创建了被后世部分程序员称为世界上最好的编程语言的多用途脚本语言PHP(<em>PHP:Hypertext Preprocessor</em>)</p>
<p>PHP是一门主要用于Web开发的后端脚本语言，由于它非常易于上手，开发成本低，开发速度快，所以被很多的中小型公司作为首要语言</p>
<hr>
<h1 id="PHP开发环境"><a href="#PHP开发环境" class="headerlink" title="PHP开发环境"></a>PHP开发环境</h1><p>PHP的开发环境常见的分为三种</p>
<ul>
<li>LAMP</li>
<li>LNMP</li>
<li>LNMPA</li>
<li>WAMP</li>
</ul>
<p>当然，这都不是必备的，我们只需要在系统中安装Web中间件加上PHP加上数据库软件就可以</p>
<p>为了简化安装过程，本文使用phpstudy集成环境进行安装(建议使用2018版)</p>
<p>PHP文档的执行需要将php文件存放在运行环境的www文件夹中，通过127.0.0.1本地地址打开</p>
<p>PHP文档的执行需要将php文件存放在运行环境的www文件夹中，通过127.0.0.1本地地址打开</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200408011939322.png" alt="image-20200408011939322"></p>
<hr>
<h1 id="PHP基础语法"><a href="#PHP基础语法" class="headerlink" title="PHP基础语法"></a>PHP基础语法</h1><p>php是一门脚本语言，它的源文件是一个.php结尾的文本文件</p>
<h1 id="PHP语法风格"><a href="#PHP语法风格" class="headerlink" title="PHP语法风格"></a>PHP语法风格</h1><p>编程语言所有代码都需要使用英文半角符号，如果使用中文符号解释器和编辑器将无法辨认</p>
<h2 id="标准风格"><a href="#标准风格" class="headerlink" title="标准风格"></a>标准风格</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> 代码段;<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="短风格"><a href="#短风格" class="headerlink" title="短风格"></a>短风格</h2><p>需要将PHP配置文件php.ini中的short_open_tag=On,重启Apache服务即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span> 代码段;<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="ASP风格"><a href="#ASP风格" class="headerlink" title="ASP风格"></a>ASP风格</h2><p>需要将PHP配置文件php.ini中的asp_open_tag=On,重启Apache服务即可</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">%</span> 代码段;<span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure>
<h1 id="PHP语法规范"><a href="#PHP语法规范" class="headerlink" title="PHP语法规范"></a>PHP语法规范</h1><p>PHP不像其他的语言，他没有很严格的语法格式规范，写在php标签内的语句都会被认为是php代码，需要注意的是英文半角符号和分号的代码分割</p>
<h1 id="PHP文档的组成"><a href="#PHP文档的组成" class="headerlink" title="PHP文档的组成"></a>PHP文档的组成</h1><p>在php文档中，不光只能写php代码，还可以写html、css、js、jquery的代码，如果文档中只写php代码的时候，php标签不用成对出现，反正则务必成对出现</p>
<h2 id="php与html页面混搭"><a href="#php与html页面混搭" class="headerlink" title="php与html页面混搭"></a>php与html页面混搭</h2><p>需要注意的是，这里的页面后缀不能为.html，而是.php</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>php与html页面混搭<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"嵌入的php代码"</span>  </span></span><br><span class="line"><span class="php">  <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="PHP注释"><a href="#PHP注释" class="headerlink" title="PHP注释"></a>PHP注释</h1><p>php的注释分为三种</p>
<p>单行注释</p>
<ul>
<li>//注释内容    C++风格</li>
<li>#注释内容    shell风格</li>
</ul>
<p>多行注释</p>
<ul>
<li>/<em>注释内容</em>/<h1 id="PHP编码设置"><a href="#PHP编码设置" class="headerlink" title="PHP编码设置"></a>PHP编码设置</h1></li>
</ul>
<p>如果有中文的话，需要在php的第一行代码告诉浏览器解析文档的编码方式，防止中文乱码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">  header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span></span><br><span class="line"><span class="php">  php代码....</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="PHP执行流程"><a href="#PHP执行流程" class="headerlink" title="PHP执行流程"></a>PHP执行流程</h1><p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507163526505.png" alt="image-20200507163526505"><br>我们以访问百度为例，我们通过域名访问百度，其实是将域名拿到hosts文件和计算机所设置的dns服务器中查询，查询到域名所对应的ip地址后，浏览器向ip地址发出http请求，如果发现请求到的文件需要调用php文件参与，服务器上的web中间件将会把数据转发给php引擎进行解释执行，执行过程中可能会与数据库进行交互，当php执行完成后，服务器将会把执行结果和html进行组装，返回到用户浏览器进行渲染，呈现出所看到的页面</p>
]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>2.PHP</category>
        <category>1.PHP基础</category>
      </categories>
      <tags>
        <tag>1.Web开发</tag>
        <tag>2.PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>2.PHP的变量与数据类型</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2.PHP/2.PHP%E7%9A%84%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</url>
    <content><![CDATA[<p>对于接触过编程的小伙伴们，这个概念一定不会陌生，所谓变量，就是一个可以变化的量，其核心作用就是在内存中开辟一块足够存放数据的空间，供程序运行的时候临时存放数据使用，变量名就是对这块空间的命名，变量值就是其存放的数据</p>
<hr>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>在php中变量的定义是用$符号标识的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义变量</span></span><br><span class="line">$username=<span class="string">"kinght"</span>;</span><br><span class="line"><span class="comment">//一次定义多个变量，且变量值相同</span></span><br><span class="line">$a=$b=$c=<span class="number">123</span>;</span><br><span class="line"><span class="comment">//使用变量(输出)</span></span><br><span class="line"><span class="keyword">echo</span> $username;  <span class="comment">//echo是向浏览器输出信息</span></span><br></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>变量名是以字母或者下划线开始，后跟数字、字母、下划线</li>
<li>变量名最好含义明确</li>
<li>变量命名最好遵循驼峰标记法/下划线法</li>
<li>变量名称严格区分大小写</li>
<li>如果变量名重复后面值会覆盖前值</li>
<li>PHP是弱类型语言，变量可以不提前声明直接使用</li>
<li>使用变量直接书写变量名称即可<h2 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h2></li>
</ul>
<p>在php中支持一种非常有意思的类似等量代换的变量语法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$i=<span class="string">"j"</span>;</span><br><span class="line">	$j=<span class="string">"k"</span>;</span><br><span class="line">	$k=<span class="string">"helloworld"</span>;</span><br><span class="line">	<span class="keyword">echo</span> $$$i;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下<br><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507164038657.png" alt="image-20200507164038657"></p>
<p>我们来简单解读一下，我们要的输出的变量是$$$i，而$i等于j，j前方又有一个$符号，所以继续当作变量执行$$j，继续如此，最后结果为$k</p>
<hr>
<h1 id="PHP的数据类型"><a href="#PHP的数据类型" class="headerlink" title="PHP的数据类型"></a>PHP的数据类型</h1><p>php是一种弱类型的语言，在声明的时候不需要写明它的数据类型，但不代表他没有，而是他在赋值的时候自动帮你辨别了数据类型</p>
<p>php的数据类型分为八种主要数据类型和三种伪类型</p>
<p>我们今天主要讲解主要数据类型，伪类型后面遇到了讲解</p>
<h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p><a href="https://baike.baidu.com/item/%E6%95%B4%E5%9E%8B/4813071" target="_blank" rel="noopener">整型</a>指没有小数部分的数据。整型可以用<a href="https://baike.baidu.com/item/%E5%8D%81%E8%BF%9B%E5%88%B6/6521392" target="_blank" rel="noopener">十进制</a>，<a href="https://baike.baidu.com/item/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/4162457" target="_blank" rel="noopener">十六进制</a>或<a href="https://baike.baidu.com/item/%E5%85%AB%E8%BF%9B%E5%88%B6/4230825" target="_blank" rel="noopener">八进制</a>符号指定，前面可以加上可选的符号（- 或者 +）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">//整型的例子</span></span><br><span class="line">	<span class="comment">//声明十进制整型</span></span><br><span class="line">	$var=<span class="number">123</span>;</span><br><span class="line">	var_dump($var);	<span class="comment">//打印变量的详细信息，可用逗号分隔一次性打印多个</span></span><br><span class="line">	<span class="comment">//声明八进制整数</span></span><br><span class="line">	$var=<span class="number">0123</span>;	<span class="comment">//以0开头的为八进制，浏览器会默认输出十进制，所以这里的输出为83</span></span><br><span class="line">	var_dump($var);</span><br><span class="line">	<span class="comment">//声明十六进制的整数</span></span><br><span class="line">	$var=<span class="number">0xabcde</span>;	<span class="comment">//以0x开头为十进制，浏览器会默认输出十进制，所以这里的输出为703710</span></span><br><span class="line">	var_dump($var);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>浮点型其实就是带小数点的数，科学计数法可以用e或者E来写</p>
<p>注意：浮点数有误差，不要比较两个浮点数的大小</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">//浮点数的例子</span></span><br><span class="line">	$float=<span class="number">12.3</span>;</span><br><span class="line">	var_dump($float);</span><br><span class="line">	<span class="comment">//科学计数法写法</span></span><br><span class="line">	$floate=<span class="number">2e3</span>;	<span class="comment">//float=2乘以10的3次方=2000</span></span><br><span class="line">	var_dump($floate);</span><br><span class="line">	$floate=<span class="number">2e-3</span>;	<span class="comment">//float=2乘以10的-3次方=0.002</span></span><br><span class="line">	var_dump($floate);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>布尔型也是计算机中非常重要的数据类型，它的值只有两个，真(true)或者假(false)</p>
<p>php的布尔值大小写没有规定，不过通常将大写作为常量的写法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">//布尔的例子</span></span><br><span class="line">	$bool=<span class="keyword">true</span>;</span><br><span class="line">	var_dump($bool);</span><br><span class="line">	$bool=<span class="keyword">False</span>;	<span class="comment">//浏览器输出时可能会变成小写false</span></span><br><span class="line">	var_dump($bool);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h2><p>单个字母、数字、符号我们可以当作一个字符，而通常我们使用的时候使用多个字符组合使用，这个就叫做字符串</p>
<p>我们在使用字符串的时候，需要使用定界符把字符串进行包含</p>
<h3 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h3><p>定界符有四种单引号定界符、双引号定界符、heredoc、nowdoc</p>
<p>单引号定界符、双引号定界符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">	$string1=<span class="string">'这是单引号定界符'</span>;	<span class="comment">//单引号输出不被解析，可用于输出有空格和特殊字符的字符串</span></span><br><span class="line">	$string2=<span class="string">"这是双引号定界符"</span>;	<span class="comment">//双引号输出会被解析</span></span><br><span class="line">	$string=<span class="string">""</span>;<span class="comment">//空字符串</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'$string1'</span>,<span class="string">'&amp;nbsp'</span>,<span class="string">"$string2"</span>;	<span class="comment">//echo可通过逗号输出多个变量</span></span><br><span class="line">	<span class="comment">//echo输出语句结果:$string1 这是双引号</span></span><br><span class="line">	$username=<span class="string">"kinght"</span>;</span><br><span class="line">	<span class="comment">//echo "$username是我";	//</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&#123;$username&#125;是我"</span>;	<span class="comment">//这里使用花括号解决问题</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>heredoc、nowdoc<br>这两个符号的作用主要在于写大段的内容</p>
<p>heredoc相当于双引号</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$username=<span class="string">"kinght"</span>;</span><br><span class="line">$userage=<span class="number">22</span>;</span><br><span class="line"><span class="comment">//通过heredoc写一个表格</span></span><br><span class="line"><span class="comment">//注意这里的TABLE为自命名,名称可以使用双引号括起来"TABLE"</span></span><br><span class="line">$str=<span class="string">&lt;&lt;&lt;TABLE</span></span><br><span class="line"><span class="string">&lt;table align="center" border=1 width="5%" bgcolor="pink"&gt;</span></span><br><span class="line"><span class="string">	&lt;tr&gt;</span></span><br><span class="line"><span class="string">		&lt;td align="right"&gt;UID&lt;/td&gt;</span></span><br><span class="line"><span class="string">		&lt;td&gt;<span class="subst">&#123;$username&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">	&lt;/tr&gt;</span></span><br><span class="line"><span class="string">	&lt;tr&gt;</span></span><br><span class="line"><span class="string">		&lt;td align="right"&gt;UAG&lt;/td&gt;</span></span><br><span class="line"><span class="string">		&lt;td&gt;<span class="subst">&#123;$userage&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">	&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string">TABLE;</span></span><br><span class="line"><span class="comment">//这里为TABLE的结束，格式严格，必须顶行，且后单行不能添加任何代码，包括注释</span></span><br><span class="line"><span class="keyword">echo</span> $str;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507164056462.png" alt="image-20200507164056462"></p>
<p>nowdoc相当于单引号</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$username=<span class="string">"kinght"</span>;</span><br><span class="line">$userage=<span class="number">22</span>;</span><br><span class="line"><span class="comment">//通过nowedoc写一个表格</span></span><br><span class="line"><span class="comment">//注意这里的TABLE为自命名,名称只能使用单引号括起来'TABLE'</span></span><br><span class="line">$str=<span class="string">&lt;&lt;&lt;'TABLE'</span></span><br><span class="line"><span class="string">&lt;table align="center" border=1 width="5%" bgcolor="pink"&gt;</span></span><br><span class="line"><span class="string">	&lt;tr&gt;</span></span><br><span class="line"><span class="string">		&lt;td align="right"&gt;UID&lt;/td&gt;</span></span><br><span class="line"><span class="string">		&lt;td&gt;<span class="subst">&#123;$username&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">	&lt;/tr&gt;</span></span><br><span class="line"><span class="string">	&lt;tr&gt;</span></span><br><span class="line"><span class="string">		&lt;td align="right"&gt;UAG&lt;/td&gt;</span></span><br><span class="line"><span class="string">		&lt;td&gt;<span class="subst">&#123;$userage&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">	&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string">TABLE;</span></span><br><span class="line"><span class="comment">//这里为TABLE的结束，格式严格，必须顶行，且后单行不能添加任何代码，包括注释</span></span><br><span class="line"><span class="keyword">echo</span> $str;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507164108725.png" alt="image-20200507164108725"></p>
<h3 id="花括号"><a href="#花括号" class="headerlink" title="花括号"></a>花括号</h3><p>注意PHP引擎会尽可能的往后取变量名，我们使用花括号解决${变量名}或{$变量名}</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;$username&#125;是我"</span>;	<span class="comment">//这里使用花括号解决问题</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$&#123;username&#125;是我"</span>;</span><br></pre></td></tr></table></figure>
<p>花括号也可以用于字符类型的增删改查</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//对于字符串指定字符做增删改查</span></span><br><span class="line">$string=<span class="string">"abcdef"</span>;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">	<span class="comment">//增删改查时字符串字符序号从0开始</span></span><br><span class="line"><span class="keyword">echo</span> $string&#123;<span class="number">0</span>&#125;;	<span class="comment">//输出结果为a</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">$string&#123;<span class="number">1</span>&#125;=<span class="string">'z'</span>;</span><br><span class="line"><span class="keyword">echo</span> $string;	<span class="comment">//输出结果为azcdef</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">	<span class="comment">//注意，修改的时候只能一个字符替换一个字符</span></span><br><span class="line">$string&#123;<span class="number">3</span>&#125;=<span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">echo</span> $string;	<span class="comment">//输出结果为azchef,只有下标为3的字符被替换成了h</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">	<span class="comment">//不要对中文字符做操作,中文字符一个字占3个字符</span></span><br><span class="line"><span class="comment">//删除，删除相当于用空字符进行替换</span></span><br><span class="line">$string&#123;<span class="number">3</span>&#125;=<span class="string">''</span>;	</span><br><span class="line"><span class="keyword">echo</span> $string;	<span class="comment">//输出结果azcef</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="comment">//添加字符</span></span><br><span class="line">$string=<span class="string">'abd'</span>;</span><br><span class="line">$string&#123;<span class="number">3</span>&#125;=<span class="string">'c'</span>;</span><br><span class="line"><span class="keyword">echo</span> $string;	<span class="comment">//输出结果abdc</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">	<span class="comment">//添加字符可以超出字符数量,多余部分由空字符补齐</span></span><br><span class="line">$string&#123;<span class="number">7</span>&#125;=<span class="string">'k'</span>;</span><br><span class="line"><span class="keyword">echo</span> $string;	<span class="comment">//输出结果abdc k</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>当我们需要输出的字符串里有一些特殊字符容易引起冲突的时候使用转义字符</p>
<p>常见的转义字符</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507164152892.png" alt="image-20200507164152892"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$str=<span class="string">"He said \"I'm Fine\""</span>;</span><br><span class="line">	<span class="keyword">echo</span> $str;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><p>数组和对象属于复合类型，前面所有的数据类型都只能同时存储一种类型的数据，数组和对象会单独成篇幅进行讲解所以只是简单提一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//测试复合类型</span></span><br><span class="line"><span class="comment">//声明一个数组</span></span><br><span class="line">$arr=<span class="keyword">array</span>();	<span class="comment">//输出结果array(0) &#123; &#125; </span></span><br><span class="line">var_dump($arr);	</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">$arr=<span class="keyword">array</span>(<span class="number">12</span>,<span class="string">'kinght'</span>,<span class="keyword">true</span>,<span class="number">123.4</span>);</span><br><span class="line">	<span class="comment">//输出结果array(4) &#123; [0]=&gt; int(12) [1]=&gt; string(6) "kinght" [2]=&gt; bool(true) [3]=&gt; float(123.4) &#125;  </span></span><br><span class="line">var_dump($arr);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试对象</span></span><br><span class="line">$obj=<span class="keyword">new</span> StdClass();<span class="comment">//输出结果object(stdClass)#1 (0) &#123; &#125; </span></span><br><span class="line">var_dump($obj);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507164455784.png" alt="image-20200507164455784">      </p>
<h2 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h2><p>特殊类型包含了资源和空</p>
<p>资源是表示php的一种外部资源，例如文件的访问、数据库的访问、图像的一些操作，程序员需要通过一些API进行操作，这些后续会进行详细讲解</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//测试资源</span></span><br><span class="line">$handle=fopen(<span class="string">'./int.php'</span>,<span class="string">'r'</span>);</span><br><span class="line">var_dump($handle);	<span class="comment">//输出resource(3) of type (stream) </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>空是用null(NULL)进行表示，通常有三种情况会产生空值</p>
<ul>
<li>变量未声明直接使用，它的值就是null</li>
<li>声明一个变量并且赋值为null</li>
<li>经过<a href="https://www.php.net/manual/zh/function.unset.php" target="_blank" rel="noopener">unset()</a>注销过的变量值为null<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//设置错误级别：E_ALL(所有错误都显示)&amp;~(除去)E_NOTICE(通知级别)</span></span><br><span class="line">error_reporting(E_ALL&amp;~E_NOTICE);</span><br><span class="line"><span class="comment">//测试空</span></span><br><span class="line"><span class="comment">//未定义变量直接使用</span></span><br><span class="line">var_dump($testNull);<span class="comment">//输出NULL </span></span><br><span class="line"><span class="comment">//声明一个变量赋值为null</span></span><br><span class="line">$testNull2=<span class="keyword">null</span>;<span class="comment">//输出NULL </span></span><br><span class="line">var_dump($testNull2);</span><br><span class="line"><span class="comment">//unset注销变量</span></span><br><span class="line">$testNull3=<span class="number">123</span>;</span><br><span class="line">var_dump($testNull3);<span class="comment">//输出int(123)</span></span><br><span class="line"><span class="keyword">unset</span>($testNull3);</span><br><span class="line">var_dump($testNull3);<span class="comment">//输出NULL </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="PHP的数据类型转换"><a href="#PHP的数据类型转换" class="headerlink" title="PHP的数据类型转换"></a>PHP的数据类型转换</h1><p>我们很多时候都会遇到需要把一个类型的数值转换为另外一个类型使用的情况，例如echo输出到浏览器中的都是字符串类型，但我们也用它输出整型浮点型布尔型，实际的操作上他把其他的类型全都转化成了字符串类型进行输出，php的数据类型转换分为两种</p>
<h2 id="自动转换-隐式转换"><a href="#自动转换-隐式转换" class="headerlink" title="自动转换(隐式转换)"></a>自动转换(隐式转换)</h2><p>自动转换不需要认为的进行操作，php解释器会根据代码上下文环境进行自动转换，其核心思想就是，小内存空间类型放到大内存空间里，因为不会造成数据的损失，所以就会自动进行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line"><span class="comment">//其他类型转换为数值型</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span>+<span class="keyword">true</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//输出结果为2，true转换为了1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span>+<span class="keyword">false</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//输出结果为1，false转换为了0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span>+<span class="keyword">null</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//输出结果为1，null转换为了0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span>+<span class="string">'35kinght'</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//输出结果为36，3kinght因为首字符为数字所以35被当作数字截断，后续无论是否有数字全丢弃</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span>+<span class="string">'kinght'</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//输出结果为1，因为首字符不为数字</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr/&gt;'</span>;</span><br><span class="line"><span class="comment">//其他类型转换为字符串</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">123.2</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//输出123.2</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">true</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//输出为1，先转换为整型然后变为字符型</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">false</span>,<span class="keyword">null</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//不输出</span></span><br><span class="line">	<span class="comment">//注意：对象不能直接转换为字符串，报致命错误</span></span><br><span class="line"><span class="comment">//其他类型转换为布尔类型</span></span><br><span class="line">	<span class="comment">//空字符串或0或null或空数组为转换为false，其他的皆为true</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"1会转化成true"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="强制转换-显示转换"><a href="#强制转换-显示转换" class="headerlink" title="强制转换(显示转换)"></a>强制转换(显示转换)</h2><p>强制转换用于系统不能自动转换的情况，例如大内存空间数值存入小内存空间中，会导致数值可能发生损失的情况</p>
<h3 id="临时性强制转换"><a href="#临时性强制转换" class="headerlink" title="临时性强制转换"></a>临时性强制转换</h3><p>转换后不改变原始变量值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//(变量类型)$变量名称</span></span><br><span class="line">$var=<span class="keyword">true</span>;</span><br><span class="line">var_dump($var);<span class="comment">//输出bool(true) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">var_dump((int)$var);<span class="comment">//输出int(1) </span></span><br><span class="line">$var=<span class="string">'5.6kinght'</span>;</span><br><span class="line">var_dump((int)$var);<span class="comment">//输出int(5),大内存空间转换为小内存空间会丢失数据精度</span></span><br><span class="line">$var=<span class="string">'kinght'</span>;</span><br><span class="line">var_dump((bool)$var);<span class="comment">//输出bool(true),空字符串或0或null或空数组为转换为false，其他的皆为true</span></span><br><span class="line">var_dump((object)$var);<span class="comment">//输出object(stdClass)#1 (1) &#123; ["scalar"]=&gt; string(6) "kinght" &#125; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量类型val($变量名称)</span></span><br><span class="line">var_dump(doubleval($var));</span><br><span class="line">var_dump(floatval($var));</span><br><span class="line">var_dump(boolval($var));</span><br><span class="line">var_dump(strval($var));<span class="comment">//转换为字符串类型为strval</span></span><br><span class="line"><span class="keyword">echo</span> boolval($var);  <span class="comment">//由于echo输出到浏览器会默认转换为字符串形式，这里输出为1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="永久性强制转换"><a href="#永久性强制转换" class="headerlink" title="永久性强制转换"></a>永久性强制转换</h3><p>转换后原始值会改变，在php中永久转换需要通过函数</p>
<ul>
<li><a href="https://www.php.net/manual/zh/function.settype.php" target="_blank" rel="noopener">settype();</a>设置变量类型</li>
<li><a href="https://www.php.net/manual/zh/function.gettype" target="_blank" rel="noopener">gettype();</a>得到变量类型(不要使用gettype测试变量类型，因为后续可能返回值改变，推荐使用is_*代替)</li>
<li>is_*();他是一个检测函数，检测结果返回布尔值<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//永久转换</span></span><br><span class="line">$var=<span class="number">123</span>;</span><br><span class="line"><span class="keyword">echo</span> gettype($var);	<span class="comment">//得到变量类型，得到的是数值，需要配合输出，输出结果integer</span></span><br><span class="line">settype($var,bool);</span><br><span class="line"><span class="keyword">echo</span> gettype($var);</span><br><span class="line"><span class="comment">//is_*</span></span><br><span class="line">var_dump(is_int($var));<span class="comment">//输出bool(false)</span></span><br><span class="line">var_dump(is_float($var));<span class="comment">//输出bool(false)</span></span><br><span class="line">var_dump(is_bool($var));<span class="comment">//输出bool(true) </span></span><br><span class="line">	<span class="comment">//检测是否为资源</span></span><br><span class="line">$var=fopen(<span class="string">'./int.php'</span>,<span class="string">'r'</span>);</span><br><span class="line">var_dump(is_resource($var))<span class="comment">//输出bool(true) </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>变量作用域</p>
<p>所谓变量作用域（scope），是指特定变量在代码中可以被访问到的位置。在PHP中有6种基本的变量作用域法则。</p>
<ol>
<li>内置超全局变量（built-in superglobal variables），在代码中的任意位置都可以访问到。</li>
<li>常量（constants），一旦声明，就是全局性的，可以在函数内外使用。</li>
<li>全局变量（global variables），在代码间声明，可在代码间访问，但是不能在函数内访问。</li>
<li>在函数中声明为全局变量的变量就是同名的全局变量。</li>
<li>在函数中创建和声明为静态变量的变量在函数外是无法访问的，但是这个静态变量的值可以保留。</li>
<li>在函数中创建和声明的局部变量在函数外是无法访问的，并且在本函数终止时失效。<h2 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h2></li>
</ol>
<p>superglobal或autoglobal可以称为“超全局变量”或“自动全局变量”。这种变量的特性是，无论在程序的任何地方都可以访问到，无论是函数内还是函数外都可以访问到。而这些“超全局变量”就是由PHP预先定义好以方便使用的。那么这些“超全局变量”或“自动全局变量”都有哪些呢？</p>
<ul>
<li>$GLOBALS：包含全局变量的数组。</li>
<li>$_GET：包含所有通过GET方法传递给代码的变量的数组。</li>
<li>$_POST：包含所有通过POST方法传递给代码的变量的数组。</li>
<li>$_FILES：包含文件上传变量的数组。</li>
<li>$_COOKIE：包含cookie变量的数组。</li>
<li>$_SERVER：包含服务器环境变量的数组。</li>
<li>$_ENV：包含环境变量的数组。</li>
<li>$_REQUEST：包含用户所有输入内容的数组（包括$_GET、$_POST和$_COOKIE）。</li>
<li>$_SESSION：包含会话变量的数组。<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2></li>
</ul>
<p>全局变量其实就是在函数外声明的变量，在代码间都可以访问，但是在函数内是不能访问的。这是因为函数默认不能访问在其外部的全局变量。</p>
<p>通过下面的实例介绍全局变量的使用方法和技巧。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL&amp;~E_NOTICE);</span><br><span class="line">$a=<span class="number">1000</span>; <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ff</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	$b=<span class="number">100</span>;	<span class="comment">//局部变量</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"函数内变量a的值为"</span>,$a,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"函数内变量b的值为"</span>,$b,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">ff();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"函数外变量a的值为"</span>,$a,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"函数外变量b的值为"</span>,$b,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>输出结果:<br><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507164417332.png" alt="image-20200507164417332"></p>
<p>出现上述结果是因为函数无法访问外部全局变量，但是在代码间可以访问全局变量。如果想让函数访问某个全局变量，可以在函数中通过global关键字来声明，就是要告诉函数，它要调用的变量是一个已经存在或者即将创建的同名全局变量，而不是默认的本地变量。</p>
<p>通过下面的实例介绍global关键字</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL&amp;~E_NOTICE);</span><br><span class="line">$a=<span class="number">1000</span>; <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ff</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	$b=<span class="number">100</span>;	<span class="comment">//局部变量</span></span><br><span class="line">	<span class="keyword">global</span> $a;  <span class="comment">//函数内调用全局变量</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"函数内变量a的值为"</span>,$a,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"函数内变量b的值为"</span>,$b,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">ff();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"函数外变量a的值为"</span>,$a,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"函数外变量b的值为"</span>,$b,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>输出结果:<br><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507164401320.png" alt="image-20200507164401320">      </p>
<p>注意：在PHP 7中，global关键字现在只能引用<a href="https://www.php.cn/toutiao-407849.html" target="_blank" rel="noopener">简单变量</a></p>
<p>可以通过“超全局变量”中的$GLOBALS数组进行访问</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL&amp;~E_NOTICE);</span><br><span class="line">$a=<span class="number">1000</span>; <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ff</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	$b=<span class="number">100</span>;	<span class="comment">//局部变量</span></span><br><span class="line">	$a=$GLOBALS[<span class="string">'a'</span>];	<span class="comment">//通过GLOBALS数组访问全局变量</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"函数内变量a的值为"</span>,$a,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"函数内变量b的值为"</span>,$b,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">ff();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"函数外变量a的值为"</span>,$a,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"函数外变量b的值为"</span>,$b,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h1><p>静态变量只是在函数内存在，在函数外无法访问。但是执行后，其值保留，也就是说这一次执行完毕后，静态变量的值保留，下一次再执行此函数，这个值还可以调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$person = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showpeople</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> $person=<span class="number">5</span>;</span><br><span class="line">	$person++;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'再增加一位顾客，将会有'</span>.$person.<span class="string">'位顾客。&lt;br/&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">showpeople();</span><br><span class="line"><span class="keyword">echo</span> $person.<span class="string">'人员。&lt;br/&gt;'</span>;</span><br><span class="line">showpeople();</span><br></pre></td></tr></table></figure>
<p>输出结果:<br><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507164328866.png" alt="image-20200507164328866"></p>
<p>（1）其中函数外的echo语句无法调用函数内的static $person，它调用的是$person = 20。（2）showpeople()函数被执行两次，这个过程中static $person的运算值得以保留，并且通过$person++进行了累加，如果没有static，那么第二次执行的时候，自加应该还是从5开始得到结果6</p>
<hr>
<h1 id="销毁变量"><a href="#销毁变量" class="headerlink" title="销毁变量"></a>销毁变量</h1><p>当用户创建一个变量时，相应地在内存中有一个空间专门用于存储该变量，该空间引用计数加1。当变量与该空间的联系被断开时，空间引用计数减1，直到引用计数为0，则成为垃圾。PHP有自动回收垃圾的机制，用户也可以手动销毁变量，通常使用unset()函数来实现。其中，若变量类型为局部变量，则变量被销毁；若变量类型为全局变量，则变量不会被销毁。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL&amp;~E_NOTICE);</span><br><span class="line">$b=<span class="string">"大漠孤烟直，长河落日圆。"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ts</span><span class="params">()</span></span>&#123;</span><br><span class="line">	$a=<span class="number">10</span>;</span><br><span class="line">	<span class="keyword">global</span> $b;</span><br><span class="line">	<span class="keyword">unset</span>($a);</span><br><span class="line">	<span class="keyword">echo</span> $a;</span><br><span class="line">&#125;</span><br><span class="line">ts();</span><br><span class="line"><span class="keyword">echo</span> $b;</span><br></pre></td></tr></table></figure>
<p>输出结果：<br><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507164314961.png" alt="image-20200507164314961">))</p>
<p>只输出了b没有输出a，因为a被销毁了</p>
]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>2.PHP</category>
        <category>1.PHP基础</category>
      </categories>
      <tags>
        <tag>1.Web开发</tag>
        <tag>2.PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>3.PHP常量</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2.PHP/3.PHP%E5%B8%B8%E9%87%8F.html</url>
    <content><![CDATA[<p>之前我们已经了解过了变量，其实常量的概念很相似，也是在内存中开辟一个空间进行值的存放，只是说，常量一经定义，就不能够再改变了，常量通常保存一些在网站中不需要改变的信息</p>
<h1 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h1><p>常量是一个简单值的标识符，常量一经定义在脚本执行期间不能改变</p>
<h1 id="常量分类"><a href="#常量分类" class="headerlink" title="常量分类"></a>常量分类</h1><h2 id="系统常量"><a href="#系统常量" class="headerlink" title="系统常量"></a>系统常量</h2><p>PHP解释器定义好可直接使用的常量</p>
<p>相关文档：<a href="https://www.php.net/manual/zh/reserved.constants.php#reserved.constants.core" target="_blank" rel="noopener">https://www.php.net/manual/zh/reserved.constants.php#reserved.constants.core</a></p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> PHP_VERSION,<span class="string">"&lt;br/&gt;"</span>;  <span class="comment">//PHP版本</span></span><br><span class="line"><span class="keyword">echo</span> PHP_OS,<span class="string">"&lt;br/&gt;"</span>;  <span class="comment">//PHP运行系统</span></span><br><span class="line"><span class="keyword">echo</span> PHP_INT_MAX,<span class="string">"&lt;br/&gt;"</span>;  <span class="comment">//整型最大值</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义常量"><a href="#自定义常量" class="headerlink" title="自定义常量"></a>自定义常量</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//常量名称不加$</span></span><br><span class="line"><span class="comment">//常量区分大小写，且最好大写</span></span><br><span class="line"><span class="comment">//常量默认全局，可以定义后在任何位置使用</span></span><br><span class="line"><span class="comment">//常量值可以是标量类型，在php7中可以为数组</span></span><br><span class="line"><span class="comment">//常量一经定义在脚本执行期间不能改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过define(常量名字,值)定义常量</span></span><br><span class="line">define(<span class="string">'TEST'</span>,<span class="string">'This is a test'</span>);</span><br><span class="line">define(<span class="string">'TEST_ARRAY'</span>,<span class="keyword">array</span>(<span class="string">'t'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>));<span class="comment">//ARRAY是关键字</span></span><br><span class="line"><span class="comment">//通过const关键字定义常量</span></span><br><span class="line"><span class="keyword">const</span> PI=<span class="number">3.1415926</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常量的使用</span></span><br><span class="line"><span class="comment">//直接使用常量</span></span><br><span class="line"><span class="keyword">echo</span> TEST,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">var_dump(TEST_ARRAY);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> PI,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">//通过constant('常量名称')获取常量值</span></span><br><span class="line"><span class="keyword">echo</span> constant(<span class="string">'TEST'</span>);</span><br><span class="line"><span class="keyword">echo</span> constant(<span class="string">'PHP_VERSION'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过defined('常量名称')检测常量是否存在，返回值为bool</span></span><br><span class="line">var_dump(defined(<span class="string">'TEST'</span>));	<span class="comment">//存在</span></span><br><span class="line">var_dump(defined(<span class="string">'NOTEST'</span>));	<span class="comment">//不存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过get_defined_constants();得到所有已定义的常量，包含系统常量和自定义常量</span></span><br><span class="line"><span class="comment">//返回值为数组</span></span><br><span class="line">print_r(get_defined_constants());	<span class="comment">//print_r($var)打印数组信息</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h2><p>魔术（Magic）常量是PHP中预定义的常量，这些常量可以根据它们的使用位置而变化。</p>
<p>魔术常数以两个下划线（<strong>）开头，以两个下划线（</strong>）结束。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//__LINE__	得到当前行号</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__LINE__</span>,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">//__FILE__	得到当前文件的绝对路径和文件名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__FILE__</span>,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">//__DIR__	得到当前文件的绝对路径不加文件名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__DIR__</span>,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//__FUNCTION__	得到当前函数的名称</span></span><br><span class="line"><span class="comment">//__CLASS__	得到当前的类名</span></span><br><span class="line"><span class="comment">//__METHOD__	得到当前类的方法名称</span></span><br><span class="line"><span class="comment">//__TRAIT__	得到当前的TRAIT名称</span></span><br><span class="line"><span class="comment">//__NAMESPACE__	得到当前命名空间的名称</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>2.PHP</category>
        <category>1.PHP基础</category>
      </categories>
      <tags>
        <tag>1.Web开发</tag>
        <tag>2.PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>4.PHP的POST和GET</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2.PHP/4.PHP%E7%9A%84POST%E5%92%8CGET.html</url>
    <content><![CDATA[<p>POST和GET是HTTP请求的两种基本方法，在PHP中他们属于<a href="https://www.php.net/manual/zh/reserved.variables.php" target="_blank" rel="noopener">预定义变量</a>，他们也是在解释器被提前定义好可以直接使用的</p>
<hr>
<h1 id="POST和GET的作用"><a href="#POST和GET的作用" class="headerlink" title="POST和GET的作用"></a>POST和GET的作用</h1><p>我们首先来看一个最简易的提交框的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">	&lt;title&gt;注册上传演示&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;h1 align=<span class="string">"center"</span>&gt;注册上传演示&lt;/h1&gt;</span><br><span class="line">	&lt;form action=<span class="string">"post.php"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">		&lt;table align=<span class="string">"center"</span> border=<span class="string">"1"</span> width=<span class="string">"13%"</span> cellpadding=<span class="string">"0"</span> cellspacing=<span class="string">"0"</span> bgcolor=<span class="string">"#abcedf"</span>&gt;</span><br><span class="line">			&lt;tr&gt;</span><br><span class="line">				&lt;td align=<span class="string">"center"</span>&gt;用户名:&lt;/td&gt;</span><br><span class="line">				&lt;td align=<span class="string">"center"</span>&gt;&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> id=<span class="string">""</span> placeholder=<span class="string">"请输入合法用户名..."</span>&gt;&lt;/input&gt;&lt;/td&gt;</span><br><span class="line">			&lt;/tr&gt;</span><br><span class="line">			&lt;tr&gt;</span><br><span class="line">				&lt;td align=<span class="string">"center"</span>&gt;密码:&lt;/td&gt;</span><br><span class="line">				&lt;td align=<span class="string">"center"</span>&gt;&lt;input type=<span class="string">"password"</span> name=<span class="string">"userpasswd"</span> id=<span class="string">""</span>&gt;&lt;/td&gt;</span><br><span class="line">			&lt;/tr&gt;</span><br><span class="line">			&lt;tr&gt;</span><br><span class="line">				&lt;td colspan=<span class="string">"2"</span>&gt;&lt;input type=<span class="string">"submit"</span> value=<span class="string">"立即注册"</span>&gt;&lt;/td&gt;</span><br><span class="line">			&lt;/tr&gt;</span><br><span class="line">		&lt;/table&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">	<span class="meta">&lt;?php</span></span><br><span class="line">		error_reporting(E_ALL&amp;~E_NOTICE);</span><br><span class="line">		<span class="keyword">echo</span> $_POST[<span class="string">'username'</span>],<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">		<span class="keyword">echo</span> $_POST[<span class="string">'userpasswd'</span>],<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">	<span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>如果对html不太熟悉的可以去看一下我的博客html章节<br>前文提到POST和GET最大的作用就是提交表单，用POST提交过来的数据用$_POST接收，GET提交过来的数据用$_GET接收，如果我们不能判断从前端如何提交的数据过来，就可以使用$_REQUEST</p>
<hr>
<h1 id="POST与GET的区别"><a href="#POST与GET的区别" class="headerlink" title="POST与GET的区别"></a>POST与GET的区别</h1><p>我们把代码进行一下简单的修改，把上诉代码的POST全部修改为GET</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507164831606.png" alt="image-20200507164831606"></p>
<p>我们将代码保存刷新之后，再次输入数据进行测试，我们就会发现在地址栏中的url发生了一些改变</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507164844339.png" alt="image-20200507164844339"></p>
<p>这是我们能够看到最直观的感受</p>
]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>2.PHP</category>
        <category>1.PHP基础</category>
      </categories>
      <tags>
        <tag>1.Web开发</tag>
        <tag>2.PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>5.PHP的运算符</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2.PHP/5.PHP%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<p>在编程语言中，任何的与值相关的语句，都被成为表达式，而表达式里又有这运算符来对值进行具体的操作。其实运算符的概念我们并不陌生，在数学中的加、减、乘、除、取余等都是运算符的一种</p>
<hr>
<h1 id="PHP的运算符分类"><a href="#PHP的运算符分类" class="headerlink" title="PHP的运算符分类"></a>PHP的运算符分类</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算术运算符是最简单、最常用的运算符</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165125298.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//算数运算符</span></span><br><span class="line">$a=<span class="number">3</span>;</span><br><span class="line">$b=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">echo</span> $a+$b,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $a-$b,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $a*$b,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $a/$b,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $a%$b,<span class="string">'&lt;br/&gt;'</span>;	<span class="comment">//取余3</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">3</span>%<span class="number">-8</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//取余3</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">-3</span>%<span class="number">8</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//取余-3</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">-3</span>%<span class="number">-8</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//取余-3</span></span><br><span class="line"><span class="comment">//PHP7新增</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">2</span>**<span class="number">3</span>,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//幂运算2的3次方</span></span><br></pre></td></tr></table></figure>
<h3 id="递增递减运算符"><a href="#递增递减运算符" class="headerlink" title="递增递减运算符"></a>递增递减运算符</h3><p>这属于算术运算符的一种，不同的地方有不同的叫法，递加递减、累加累剪、自加自减</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//递增递减运算符</span></span><br><span class="line"><span class="comment">//前缀模式	先加减1，再执行</span></span><br><span class="line">$i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> $i++,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//1</span></span><br><span class="line"><span class="keyword">echo</span> $i,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//2</span></span><br><span class="line"><span class="keyword">echo</span> $i--,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//2</span></span><br><span class="line"><span class="keyword">echo</span> $i,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//1</span></span><br><span class="line"><span class="comment">//后缀模式	先执行，再加减1</span></span><br><span class="line"><span class="keyword">echo</span> ++$i,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//2</span></span><br><span class="line"><span class="keyword">echo</span> $i,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//2</span></span><br><span class="line"><span class="keyword">echo</span> --$i,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//1</span></span><br><span class="line"><span class="keyword">echo</span> $i,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//1</span></span><br><span class="line"><span class="comment">//浮点类型支持</span></span><br><span class="line">$f=<span class="number">1.3</span>;</span><br><span class="line"><span class="keyword">echo</span> ++$f,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//2.3</span></span><br><span class="line"><span class="keyword">echo</span> --$f,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//1.3</span></span><br><span class="line"><span class="comment">//布尔类型不支持</span></span><br><span class="line">$b=<span class="keyword">true</span>;	<span class="comment">//整型转换为1</span></span><br><span class="line"><span class="keyword">echo</span> ++$b,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//输出结果还为1</span></span><br><span class="line"><span class="keyword">echo</span> --$b,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//输出结果还为1</span></span><br><span class="line"><span class="comment">//null只支持递增不支持递减</span></span><br><span class="line">$n=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">echo</span> ++$n,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//1</span></span><br><span class="line"><span class="keyword">echo</span> --$n,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//0或不输出</span></span><br><span class="line"><span class="comment">//字符串只支持递增不支持递减</span></span><br><span class="line">$str=<span class="string">'a1'</span>;</span><br><span class="line"><span class="keyword">echo</span> ++$str,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//a2</span></span><br><span class="line"><span class="keyword">echo</span> --$str,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//还是a2没有改变</span></span><br><span class="line">$str=<span class="string">'z'</span>;</span><br><span class="line"><span class="keyword">echo</span> ++$str,<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//aa	z+1进位等于aa</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符相加是根据ASCII码值</span></span><br><span class="line"><span class="comment">//通过ord可获得当前ascii值</span></span><br><span class="line"><span class="keyword">echo</span> ord(<span class="string">'a'</span>),<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//97</span></span><br><span class="line"><span class="comment">//通过chr可将ascii码值转换为字符</span></span><br><span class="line"><span class="keyword">echo</span> chr(<span class="number">98</span>),<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//b</span></span><br></pre></td></tr></table></figure>
<h2 id="字符连接符"><a href="#字符连接符" class="headerlink" title="字符连接符"></a>字符连接符</h2><p>字符连接符也被称为字符串运算符，把两个字符串连接起来变成一个字符串的运算符，用英文的.来链接字符串，如果变量是整型或浮点型，PHP也会自动把它们转换为字符串输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age=<span class="number">22</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'我今年'</span>.$age.<span class="string">'岁了'</span>;</span><br><span class="line">$str1=hello;</span><br><span class="line">$str2=world;</span><br><span class="line">$str = $str1.$str2;</span><br><span class="line"><span class="keyword">echo</span> $str;</span><br></pre></td></tr></table></figure>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符其实我们早就接触过，赋值运算符的作用是把一定的数据值加载给特定变量</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165151838.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//赋值运算符</span></span><br><span class="line">$a = <span class="number">12</span>;	<span class="comment">//=</span></span><br><span class="line">$a+=<span class="number">2</span>;	<span class="comment">//+=	$a=$a+2</span></span><br><span class="line">$a-=<span class="number">2</span>;	<span class="comment">//-=	$a=$a-2</span></span><br><span class="line">$a*=<span class="number">3</span>;	<span class="comment">//*=	$a=$a*3</span></span><br><span class="line">$a/=<span class="number">4</span>;	<span class="comment">///=	$a=$a/4;</span></span><br><span class="line">$a%=<span class="number">5</span>;	<span class="comment">//$=	$a=$a%5;</span></span><br><span class="line">$a.=<span class="string">"kinght"</span>;	<span class="comment">//.=	$a=$a."kinght"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mt_rand($min,$max);产生随机数</span></span><br><span class="line"><span class="keyword">echo</span> mt_rand(<span class="number">1</span>,<span class="number">9</span>),<span class="string">'&lt;br/&gt;'</span>;	<span class="comment">//产生1到9的随机数</span></span><br><span class="line"><span class="comment">//随机字体颜色</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;span style="color:rgb('</span>.mt_rand(<span class="number">0</span>,<span class="number">255</span>).<span class="string">','</span>.mt_rand(<span class="number">0</span>,<span class="number">255</span>).<span class="string">','</span>.mt_rand(<span class="number">0</span>,<span class="number">255</span>).<span class="string">')"&gt;'</span>.mt_rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="string">'&lt;/span&gt;'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符用来比较两端数据值的大小，返回的结果为布尔型的值</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165207370.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//比较运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基础比较运算符</span></span><br><span class="line">var_dump(</span><br><span class="line">	<span class="number">3</span>&gt;<span class="number">1</span>,</span><br><span class="line">	<span class="number">2</span>&lt;<span class="number">4</span>,</span><br><span class="line">	<span class="number">3</span>&gt;=<span class="number">1</span>,</span><br><span class="line">	<span class="number">2</span>&lt;=<span class="number">4</span></span><br><span class="line">);	<span class="comment">//bool(true) bool(true) bool(true) bool(true) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">//==和====的区别</span></span><br><span class="line">var_dump(</span><br><span class="line">	<span class="number">1</span>==<span class="keyword">true</span>,</span><br><span class="line">	<span class="number">1</span>===<span class="keyword">true</span>,	<span class="comment">//会检查类型</span></span><br><span class="line">	<span class="number">0</span>==<span class="keyword">false</span>,</span><br><span class="line">	<span class="number">0</span>==<span class="keyword">null</span>,</span><br><span class="line">	<span class="number">0</span>===<span class="keyword">null</span>	<span class="comment">//会检查类型</span></span><br><span class="line">);	<span class="comment">//bool(true) bool(false) bool(true) bool(true) bool(false) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">//不等于和不全等与</span></span><br><span class="line">var_dump(</span><br><span class="line">	<span class="number">1</span>&lt;&gt;<span class="keyword">true</span>,</span><br><span class="line">	<span class="number">3</span>!=<span class="number">3</span>,	<span class="comment">//&lt;&gt;和!=都为不等于，但!=可读性高</span></span><br><span class="line">	<span class="number">1</span>!==<span class="keyword">true</span>	<span class="comment">//不全等于</span></span><br><span class="line">);	<span class="comment">//bool(false) bool(false) bool(true) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">//PHP新增	结合比较运算符</span></span><br><span class="line">var_dump(</span><br><span class="line">	<span class="comment">//左边比右边大返回1</span></span><br><span class="line">	<span class="comment">//左边比右边小返回-1</span></span><br><span class="line">	<span class="comment">//相等返回0</span></span><br><span class="line">	<span class="number">3</span>&lt;=&gt;<span class="number">1</span>,<span class="comment">//1</span></span><br><span class="line">	<span class="number">3</span>&lt;=&gt;<span class="number">3</span>,<span class="comment">//0</span></span><br><span class="line">	<span class="number">3</span>&lt;=&gt;<span class="number">4</span>,<span class="comment">//-1</span></span><br><span class="line">	<span class="number">1.5</span>&lt;=&gt;<span class="number">1.5</span>,<span class="comment">//0</span></span><br><span class="line">	<span class="number">1.5</span>&lt;=&gt;<span class="number">1.2</span>,<span class="comment">//1</span></span><br><span class="line">	<span class="number">1.5</span>&lt;=&gt;<span class="number">1.6</span>,<span class="comment">//-1</span></span><br><span class="line">	<span class="string">'a'</span>&lt;=&gt;<span class="string">'a'</span>,<span class="comment">//0</span></span><br><span class="line">	<span class="string">'c'</span>&lt;=&gt;<span class="string">'a'</span>,<span class="comment">//1</span></span><br><span class="line">	<span class="string">'c'</span>&lt;=&gt;<span class="string">'e'</span><span class="comment">//-1</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">//PHP新增	NULL检测符</span></span><br><span class="line"><span class="comment">//从左往右查找第一个存在且不为NULL的操作数</span></span><br><span class="line">var_dump(</span><br><span class="line">	<span class="keyword">null</span>??<span class="string">'kinght'</span>??<span class="number">123</span>,<span class="comment">//因为第一个为null，所以返回kinght</span></span><br><span class="line">	<span class="number">123</span>??<span class="string">'kinght'</span>??<span class="number">123</span>,<span class="comment">//因为第一个为123，所以返回123</span></span><br><span class="line">	<span class="keyword">null</span>??<span class="keyword">null</span>??<span class="number">123</span>,<span class="comment">//因为第一个和第二个为null，所以返回123</span></span><br><span class="line">	<span class="number">123</span>??<span class="keyword">null</span>??<span class="number">123</span>,	<span class="comment">//因为第一个就不是null，所以返回第一个</span></span><br><span class="line">	<span class="keyword">null</span>??<span class="keyword">null</span>??<span class="keyword">null</span>??<span class="string">'第四个'</span>	<span class="comment">//null检测符不限制个数</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>编程语言最重要的功能之一就是进行逻辑判断和运算。逻辑和、逻辑或、逻辑否都是逻辑运算符。</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165449077.png" alt="image-20200507165449077"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//测试逻辑运算符</span></span><br><span class="line"><span class="comment">//逻辑与</span></span><br><span class="line"><span class="comment">//短路:如果一个表达式为false，整个结果为false，第二个表达式不会被执行</span></span><br><span class="line">var_dump(</span><br><span class="line">	<span class="keyword">true</span> &amp;&amp; <span class="keyword">true</span>,</span><br><span class="line">	<span class="keyword">true</span> &amp;&amp; <span class="keyword">false</span>,</span><br><span class="line">	<span class="keyword">false</span> &amp;&amp; <span class="keyword">true</span>,</span><br><span class="line">	<span class="keyword">false</span> &amp;&amp; <span class="keyword">false</span></span><br><span class="line">);<span class="comment">//bool(true) bool(false) bool(false) bool(false) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">//逻辑或</span></span><br><span class="line"><span class="comment">//短路:如果第一个表达式为true，整个结果为true，第二个表达式不会被执行</span></span><br><span class="line">var_dump(</span><br><span class="line">	<span class="keyword">true</span> || <span class="keyword">true</span>,</span><br><span class="line">	<span class="keyword">true</span> || <span class="keyword">false</span>,</span><br><span class="line">	<span class="keyword">false</span> || <span class="keyword">true</span>,</span><br><span class="line">	<span class="keyword">false</span> || <span class="keyword">false</span></span><br><span class="line">);<span class="comment">//bool(true) bool(true) bool(true) bool(false) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">//逻辑非</span></span><br><span class="line">var_dump(</span><br><span class="line">	!<span class="keyword">true</span>,</span><br><span class="line">	!<span class="keyword">false</span></span><br><span class="line">);<span class="comment">//bool(false) bool(true) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">//逻辑异或</span></span><br><span class="line">var_dump(</span><br><span class="line">	<span class="keyword">true</span> <span class="keyword">xor</span> <span class="keyword">true</span>,</span><br><span class="line">	<span class="keyword">true</span> <span class="keyword">xor</span> <span class="keyword">false</span>,</span><br><span class="line">	<span class="keyword">false</span> <span class="keyword">xor</span> <span class="keyword">true</span>,</span><br><span class="line">	<span class="keyword">false</span> <span class="keyword">xor</span> <span class="keyword">false</span></span><br><span class="line">);<span class="comment">//bool(false) bool(true) bool(true) bool(false)</span></span><br></pre></td></tr></table></figure>
<h2 id="按位运算符"><a href="#按位运算符" class="headerlink" title="按位运算符"></a>按位运算符</h2><p>按位运算符是把整数按照“位”的单位来进行处理</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165508171.png" alt="image-20200507165508171"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="number">7</span>;	<span class="comment">//7二进制是111</span></span><br><span class="line">$b=<span class="number">4</span>;	<span class="comment">//4二进制是100</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'$a &amp; $b ='</span>.($a&amp;$b).<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//结果为100，即4</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'$a | $b ='</span>.($a|$b).<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//结果为111，即7</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'$a ^ $b ='</span>.($a^$b).<span class="string">'&lt;br/&gt;'</span>;<span class="comment">//结果为011，即3</span></span><br></pre></td></tr></table></figure>
<h2 id="错误抑制符"><a href="#错误抑制符" class="headerlink" title="错误抑制符"></a>错误抑制符</h2><p>很多时候我们都能看到因为代码错误或者安全级别的问题导致的警告报错</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165522289.png" alt="image-20200507165522289"></p>
<p>我们只需要在对应代码前面加一个错误抑制符@就可以在页面中隐藏掉报错</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165530653.png" alt="image-20200507165530653"></p>
<p>当然，语法错误和致命错误是无法通过这个方式来隐藏的</p>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>三元运算符有点像if…else的简写模式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">表达式<span class="number">1</span>?表达式<span class="number">2</span>:表达式<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>如果表达式1为真，那么执行表达式2，否则执行表达式3</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$username=<span class="string">'kinght'</span>;</span><br><span class="line"><span class="comment">//使用if...else</span></span><br><span class="line"><span class="keyword">if</span>($username==<span class="string">'kinght'</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'hi,kinght'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'hi,everbody'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">//使用三元运算符</span></span><br><span class="line">$res=$username==<span class="string">'kinght'</span>?<span class="string">'hi,kinght'</span>:<span class="string">'hi,everbody'</span>;</span><br><span class="line"><span class="keyword">echo</span> $res;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="运算符的优先级和结合规则"><a href="#运算符的优先级和结合规则" class="headerlink" title="运算符的优先级和结合规则"></a>运算符的优先级和结合规则</h1><p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165554942.png" alt="image-20200507165554942"></p>
]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>2.PHP</category>
        <category>1.PHP基础</category>
      </categories>
      <tags>
        <tag>1.Web开发</tag>
        <tag>2.PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>6.PHP的流程控制语句</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2.PHP/6.PHP%E7%9A%84%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5.html</url>
    <content><![CDATA[<p>软件都是有很多的业务逻辑的，各个语句有自己不同的执行顺序，而流程控制语句就是来做这个工作的。流程控制语句分为两种，一种是分支语句、一种是循环语句</p>
<hr>
<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>条件语句其实也就是分支语句，根据条件不同，所得出不同的结果</p>
<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>对一个条件进行判断。如果条件成立，就执行命令语句，否则不执行</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165658920.png" alt="image-20200507165658920"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//if基础语句</span></span><br><span class="line"><span class="comment">//if(exp)结果为true执行大括号内容</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'if括号结果为true'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr/&gt;'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h2><p>如果是非此即彼的条件判断，可以使用if…else语句</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165714416.png" alt="image-20200507165714416"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//if...else</span></span><br><span class="line"><span class="comment">//if(exp)结果为true显示第一个语句1，否则显示语句2</span></span><br><span class="line">$age=<span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>($age&gt;=<span class="number">18</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'可以看美国大片小电影了~~~&lt;br/&gt;'</span>;	<span class="comment">//语句1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;	</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'只能看看葫芦娃&lt;br/&gt;'</span>;	<span class="comment">//语句2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="if…elseif…语句"><a href="#if…elseif…语句" class="headerlink" title="if…elseif…语句"></a>if…elseif…语句</h2><p>在条件控制结构中，有时会出现多种选择，此时可以使用elseif语句</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165724316.png" alt="image-20200507165724316"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//if...elseif...</span></span><br><span class="line"><span class="comment">//当有多个条件的时候使用if...elseif</span></span><br><span class="line"><span class="comment">//if(exp)结果为false将会继续检测下一个elseif语句，直到为true停止</span></span><br><span class="line"><span class="comment">//如果检测到最后还是false，则输出最后的else，如果没有就不输出</span></span><br><span class="line">$age=<span class="number">12</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">false</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'a&lt;br/&gt;'</span>;	</span><br><span class="line">&#125;<span class="keyword">elseif</span>(<span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'b&lt;br/&gt;'</span>;	</span><br><span class="line">&#125;<span class="keyword">elseif</span>($age&gt;=<span class="number">33</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'c&lt;br/&gt;'</span>;	</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'以上条件都为假的时候会执行到我&lt;br/&gt;'</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="if语句嵌套"><a href="#if语句嵌套" class="headerlink" title="if语句嵌套"></a>if语句嵌套</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试if嵌套的形式</span></span><br><span class="line"><span class="comment">//if语句内部可以在嵌套另一个if语句</span></span><br><span class="line">$username=<span class="string">'kinght'</span>;</span><br><span class="line">$age=<span class="number">22</span>;</span><br><span class="line"><span class="keyword">if</span>($username==<span class="string">'kinght'</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'hello kinght&lt;br/&gt;'</span>;</span><br><span class="line">  <span class="keyword">if</span>($age&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'成年了&lt;br/&gt;'</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'未成年&lt;br/&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'hello everyone&lt;br/&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p>switch语句的结构给出不同情况下可能执行的程序块，条件满足哪个程序块，就执行哪个语句。</p>
<p>break是跳出的意思，在检测到4之后，就停止后面的语句执行了，而default相当于else，在找不到任何满足条件的语句时执行</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165739807.png" alt="image-20200507165739807"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$weekday=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">switch</span>($weekday)&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">echo</span> <span class="string">'今天是周一'</span>;<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">echo</span> <span class="string">'今天是周二'</span>;<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">echo</span> <span class="string">'今天是周三'</span>;<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">echo</span> <span class="string">'今天是周四'</span>;<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">5</span>:<span class="keyword">echo</span> <span class="string">'今天是周五'</span>;<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:<span class="keyword">echo</span> <span class="string">'今天是周六'</span>;<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:<span class="keyword">echo</span> <span class="string">'今天是周日'</span>;<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:<span class="keyword">echo</span> <span class="string">'输入错误'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p>在程序当中，经常会遇到一部分的代码需要重复执行的情况，这时候就需要用到循环语句了</p>
<h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>for语句是最常见的循环语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(exp1;exp2;exp3)&#123;</span><br><span class="line">  代码段;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165756073.png" alt="image-20200507165756073"></p>
<p>exp1：初始化赋值</p>
<p>exp2：判断是否为true</p>
<p>exp3：修改量操作</p>
<p>程序首先会执行exp1，然后执行exp2，如果exp2为真，则执行大括号内代码段，然后在执行exp3，如果exp2为假则直接退出，后续不予执行</p>
<blockquote>
<p>注意:for循环支持嵌套<br>若不需要函数初始化，exp1可不写<br>若需要条件一直为true，exp2可不写<br>exp3因为是修改量，所以也可以不写</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;table border="1" cellpadding="0" cellspacing="0" width="80%" &gt;'</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;=<span class="number">9</span>;$i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;tr&gt;'</span>;</span><br><span class="line"><span class="keyword">for</span>($j=<span class="number">1</span>;$j&lt;=$i;$j++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;td&gt;&#123;$j&#125;&amp;times;&#123;$i&#125;="</span>.($i*$j).<span class="string">"&lt;/td&gt;"</span>;	<span class="comment">//&amp;times为×的转义字符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/tr&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/table&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200507165846184.png" alt="image-20200507165846184"></p>
<h2 id="foreach循环语句"><a href="#foreach循环语句" class="headerlink" title="foreach循环语句"></a>foreach循环语句</h2><p>foreach循环语句,是常用的一种循环语句，经常被用来遍历数组元素，每进行一次循环，当前数组元素的值就会被赋值给数组元素值变量，数组指针会逐一移动，直到遍历结束为止。</p>
<p>可以根据数组的情况分为两种，即不包含键值的数组和包含键值的数组。</p>
<h3 id="不包含键值的数组"><a href="#不包含键值的数组" class="headerlink" title="不包含键值的数组"></a>不包含键值的数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(数组 <span class="keyword">as</span> 数组元素值)&#123;</span><br><span class="line">   对数组元素的操作命令;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="包含键值的数组"><a href="#包含键值的数组" class="headerlink" title="包含键值的数组"></a>包含键值的数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(数组 <span class="keyword">as</span> 键值 =&gt; 数组元素值)&#123;</span><br><span class="line">   对数组元素的操作命令;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>演示</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr=<span class="keyword">array</span>(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>);</span><br><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $value)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"数组值："</span>.$value.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(exp)</span><br><span class="line">&#123;</span><br><span class="line">  循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先判断，在循环，exp为true执行循环体</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">false</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'HelloWorld'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="do…while循环语句"><a href="#do…while循环语句" class="headerlink" title="do…while循环语句"></a>do…while循环语句</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  循环体;</span><br><span class="line">&#125;<span class="keyword">while</span>(exp);</span><br></pre></td></tr></table></figure>
<p>先执行一次循环体再判断，exp为true执行循环</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'HelloWorld'</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>官方文档:<a href="https://www.php.net/manual/zh/control-structures.break.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/control-structures.break.php</a></p>
<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>官方文档:<a href="https://www.php.net/manual/zh/control-structures.continue.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/control-structures.continue.php</a></p>
<h2 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h2><p>官方文档:<a href="https://www.php.net/manual/zh/control-structures.goto.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/control-structures.goto.php</a></p>
<hr>
<h1 id="流程控制语句另一种书写格式"><a href="#流程控制语句另一种书写格式" class="headerlink" title="流程控制语句另一种书写格式"></a>流程控制语句另一种书写格式</h1><p>在一个含有多条件、多循环的语句中，包含多个“｛｝”，查看起来比较烦琐。流程控制语言的另一种书写方式是以“：”来代替左边的大括号，使用endif；、endwhile；、endfor；、endforeach；和endswitch；来替代右边的大括号，这种描述程序结构的可读性比较强</p>
]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>2.PHP</category>
        <category>1.PHP基础</category>
      </categories>
      <tags>
        <tag>1.Web开发</tag>
        <tag>2.PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>7.PHP的自定义函数</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2.PHP/7.PHP%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<p>在程序当中为了提高代码的复用性，我们可以将重复代码根据业务需求封装成函数进行调用</p>
<hr>
<h1 id="声明自定义函数"><a href="#声明自定义函数" class="headerlink" title="声明自定义函数"></a>声明自定义函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名称<span class="params">([$arg[=value][,...]])</span></span>&#123;</span><br><span class="line">  代码段...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>函数名称与PHP中其他的标识符命名规则相同</li>
<li>函数名称最好遵循小驼峰标记法</li>
<li>PHP函数具有全局作用域</li>
<li>PHP不支持函数重载，不能取消或重定义已声明的函数<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2></li>
</ul>
<p>调用自定义函数和调用系统函数是完全相同的，函数可以直接输出，也可以返回赋值给变量继续使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExtension</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'HelloWorld'</span>;</span><br><span class="line">&#125;</span><br><span class="line">getExtension();  <span class="comment">//调用</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="自定义函数参数"><a href="#自定义函数参数" class="headerlink" title="自定义函数参数"></a>自定义函数参数</h1><p>函数封装的语句很多时候我们需要通过参数把信息传递到函数内部进行运算，参数类型可以是除资源外的任何类型，一个函数可以有多个参数，多个参数之前使用逗号进行分隔</p>
<blockquote>
<p>案例使用了部分系统函数库，后续会有详细章节</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;?php</span></span><br><span class="line">&gt;<span class="function"><span class="keyword">function</span> <span class="title">getExtension</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">&gt;$pos = strrpos($filename,<span class="string">'.'</span>);</span><br><span class="line">&gt;<span class="comment">//strrpos是检测的最右边的.的位置</span></span><br><span class="line">&gt;<span class="keyword">echo</span> strtolower(substr($filename,$pos+<span class="number">1</span>));</span><br><span class="line">&gt;<span class="comment">//截断:substr(被截断值,截断位置)	//这里的+1是为了不要小数点</span></span><br><span class="line">&gt;<span class="comment">//小写转换:strtolower(转换值)</span></span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;getExtension(<span class="string">'kinght.blog.pHp'</span>);	<span class="comment">//输出结果php</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">函数参数不能传递资源，但是可以打开资源</span><br><span class="line">​```   php</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFileContent</span><span class="params">($fileName)</span></span>&#123;<span class="comment">//传递文件名</span></span><br><span class="line">	$handle = fopen($fileName,<span class="string">'r'</span>);	<span class="comment">//打开文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h2><p>参数可以给定默认值，有默认值的参数成为可选参数，为了防止计算机的判断混淆，所以可选参数必须放在必选参数右侧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExtension</span><span class="params">($filename,$lowerCase=true)</span></span>&#123;</span><br><span class="line">	$pos = strrpos($filename,<span class="string">'.'</span>);</span><br><span class="line">	<span class="keyword">if</span>($lowerCase==<span class="keyword">true</span>)</span><br><span class="line">		<span class="keyword">echo</span> strtolower(substr($filename,$pos+<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">echo</span> substr($filename,$pos+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">getExtension(<span class="string">'kinght.blog.pHp'</span>,<span class="keyword">false</span>);	<span class="comment">//输出结果pHp</span></span><br></pre></td></tr></table></figure>
<p>修改了一下上面的案例，如果这时候不传入false，则默认为true，但是我这里传入了false，所以输出结果为pHp</p>
<h2 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h2><p>形参字面意思是形式上的参数，也就是函数定义时的参数，实参就是在调用时函数的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">($var1,$var2)</span></span>&#123;	<span class="comment">//$var1,$var2形参</span></span><br><span class="line">	<span class="keyword">return</span> $var1+$var2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> sum(<span class="number">3</span>,<span class="number">5</span>);	<span class="comment">//3,5实参</span></span><br><span class="line">$a=<span class="number">1</span>;</span><br><span class="line">$b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> sum($a,$b);	<span class="comment">//这里的$a,$b也是实参</span></span><br></pre></td></tr></table></figure>
<p>形参和实参在数量上、类型上、顺序上应该严格保持一致</p>
<h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p>在传递参数值的时候有两种方法，</p>
<h3 id="按值-变量-传递"><a href="#按值-变量-传递" class="headerlink" title="按值(变量)传递"></a>按值(变量)传递</h3><p>按值传递会在函数内部改变参数的值，但是他不会改变函数外部变量的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">($var)</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'函数内的修改前值'</span>.$var.<span class="string">'&lt;br/&gt;'</span>;	<span class="comment">//1</span></span><br><span class="line">	$var = <span class="number">2</span>;	<span class="comment">//修改传输后的值</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'函数内的修改后值'</span>.$var.<span class="string">'&lt;br/&gt;'</span>;	<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">$var = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'函数外的修改前值'</span>.$var.<span class="string">'&lt;br/&gt;'</span>;	<span class="comment">//1</span></span><br><span class="line">demo($var);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'函数外的修改前值'</span>.$var.<span class="string">'&lt;br/&gt;'</span>;	<span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p>按值传递传入函数后，会在函数内重新开辟一个内存空间存放变量，函数内的修改不会影响到函数外的值</p>
<h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><p>引用传递和按值传递不同，引用传递传递的是空间地址，也就是说函数内外使用的是同一个函数，所以函数内外同时改变，引用传递时在参数前加上一个&amp;符号，引用传递的参数类型只能是变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">(&amp;$var)</span></span>&#123;	<span class="comment">//添加&amp;成为引用传值</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'函数内的修改前值'</span>.$var.<span class="string">'&lt;br/&gt;'</span>;	<span class="comment">//1</span></span><br><span class="line">	$var = <span class="number">2</span>;	<span class="comment">//修改传输后的值</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'函数内的修改后值'</span>.$var.<span class="string">'&lt;br/&gt;'</span>;	<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">$var = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'函数外的修改前值'</span>.$var.<span class="string">'&lt;br/&gt;'</span>;	<span class="comment">//1</span></span><br><span class="line">demo($var);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'函数外的修改前值'</span>.$var.<span class="string">'&lt;br/&gt;'</span>;	<span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>我们以前接触过很多系统函数都是引用传值，特别是对数组进行操作的函数<br>文档网址：<a href="https://www.php.net/manual/zh/" target="_blank" rel="noopener">https://www.php.net/manual/zh/</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_push</span><br><span class="line">array_unshift</span><br><span class="line">array_pop</span><br><span class="line">array_shift</span><br></pre></td></tr></table></figure>
<h2 id="可变数量的参数"><a href="#可变数量的参数" class="headerlink" title="可变数量的参数"></a>可变数量的参数</h2><p>在php5.5及之前，不支持可变数量参数，使用函数func_num_args()，func_get_arg()和func_get_args()实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#求平均值</span></span><br><span class="line"><span class="comment">//5.5及以前版本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">avg</span><span class="params">()</span></span>&#123;</span><br><span class="line">	$args = func_get_args();<span class="comment">//得到由参数所构成的数组</span></span><br><span class="line">	print_r($args);<span class="comment">//输出数组</span></span><br><span class="line">	$sum = array_sum($args);<span class="comment">//数组求和</span></span><br><span class="line">	$argNums = func_num_args($args);<span class="comment">//得到数组个数</span></span><br><span class="line">	<span class="keyword">echo</span> $sum/$argNums;<span class="comment">//得到平均值</span></span><br><span class="line">&#125;</span><br><span class="line">avg(<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">24</span>);</span><br></pre></td></tr></table></figure>
<p>php5.6及以后版本有…语法实现，传入后同样以数组形式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#求平均值</span></span><br><span class="line"><span class="comment">//5.6及以后版本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">avg</span><span class="params">(...$args)</span></span>&#123;</span><br><span class="line">	print_r($args);<span class="comment">//输出数组</span></span><br><span class="line">	$sum = array_sum($args);<span class="comment">//数组求和</span></span><br><span class="line">	$argNums = func_num_args($args);<span class="comment">//得到数组个数</span></span><br><span class="line">	<span class="keyword">echo</span> $sum/$argNums;<span class="comment">//得到平均值</span></span><br><span class="line">&#125;</span><br><span class="line">avg(<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>返回值使用的是return语句，所谓返回，就是将某个函数运行结果返回到调用该函数的函数中去，一旦运行return，将立即终止函数运行，将控制权交回调用该函数的的代码行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">	$a = <span class="string">"hello world"</span>;</span><br><span class="line">	<span class="keyword">return</span> $a;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'这里是不执行的'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> demo();</span><br></pre></td></tr></table></figure>
<p>如果不写return语句，则默认返回值为null</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">	$a = <span class="string">"测试无返回值"</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(demo());  <span class="comment">//输出为null</span></span><br></pre></td></tr></table></figure>
<p>函数只能由一个返回值，但返回值可以是数组对象等除资源以外的任意类型</p>
<hr>
<h1 id="复杂函数"><a href="#复杂函数" class="headerlink" title="复杂函数"></a>复杂函数</h1><h2 id="匿名函数和回调函数"><a href="#匿名函数和回调函数" class="headerlink" title="匿名函数和回调函数"></a>匿名函数和回调函数</h2><p>匿名函数也称为闭包函数，指的是临时创建的没有一个指定名称的函数，匿名函数主要用作回调函数的参数值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$greet = <span class="function"><span class="keyword">function</span><span class="params">($name)</span></span>&#123;	<span class="comment">//未定义名称的就是匿名函数</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'hello'</span>.$name,<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">&#125;;<span class="comment">//匿名函数需要使用;结束</span></span><br><span class="line">$greet(<span class="string">'kinght'</span>);</span><br></pre></td></tr></table></figure>
<p>而回调函数是作为参数传入另一个函数中使用的函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cube</span><span class="params">($n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'n的三次幂是'</span>,($n*$n*$n),<span class="string">'&lt;hr/&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">call_user_func(<span class="string">'cube'</span>,<span class="number">3</span>);	<span class="comment">//3为传入参数</span></span><br><span class="line">call_user_func(<span class="string">'cube'</span>,<span class="number">5</span>);	<span class="comment">//这里的cube就是回调函数，她作为参数交给系统函数来使用</span></span><br><span class="line"><span class="comment">//原型的形态 使用匿名函数直接将回调函数写在参数里</span></span><br><span class="line">call_user_func(<span class="function"><span class="keyword">function</span><span class="params">($n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'n的五次幂是'</span>,($n*$n*$n*$n*$n),<span class="string">'&lt;hr/&gt;'</span>;</span><br><span class="line">&#125;,<span class="number">5</span>);<span class="comment">//5为传入参数</span></span><br></pre></td></tr></table></figure>
<h2 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h2><p>内部函数是指在一个函数内部声明的函数，内部函数的调用必须在他所在的外部函数被调用以后才可以被执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'I am outer function&lt;br/&gt;'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">inner</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'I am inner function&lt;br&gt;'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//inner();//无法被调用</span></span><br><span class="line">outer();</span><br><span class="line">inner();</span><br><span class="line"><span class="comment">//先调用outer()，inner()现在才能正常输出</span></span><br></pre></td></tr></table></figure>
<h2 id="有条件函数"><a href="#有条件函数" class="headerlink" title="有条件函数"></a>有条件函数</h2><p>php允许函数前加判断语句判断是否定义</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">2</span>;	<span class="comment">//$a&lt;3所以a()不会被定义</span></span><br><span class="line"><span class="keyword">if</span>($a&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'我是有条件的函数'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure>
<h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>递归函数是指直接或间接调用函数本身的函数，简单来说就是函数体内又存在另外的函数，而另外的函数调用的是自己，这样的函数被称为递归函数</p>
<p>递归函数使用条件</p>
<ul>
<li>每一次调用自己时，必须(在某种结果上)更接近于结果</li>
<li>必须有一个终止的准则<h3 id="函数执行流程"><a href="#函数执行流程" class="headerlink" title="函数执行流程"></a>函数执行流程</h3></li>
</ul>
<p>为了更深入的了解执行流程，先看一串代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=urf-8'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'Hello&lt;hr&gt;'</span>;</span><br><span class="line">	fun2();</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'kinght&lt;hr&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'World&lt;hr&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'First Line&lt;hr&gt;'</span>;</span><br><span class="line">fun1();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'End line'</span>;</span><br></pre></td></tr></table></figure>
<p>程序是默认从上往下执行的，第一个执行的肯定是第二行header，往下看，函数需要在调用的时候在执行，所以第二个执行的是第十三行，然后执行第14行进入第三行fun1函数，然后再fun1中发现了fun2所以又跳转到fun2中，当func2执行完成之后回到fun1中执行完成，再跳转到15行继续执行函数体外内容</p>
<h3 id="递归函数demo"><a href="#递归函数demo" class="headerlink" title="递归函数demo"></a>递归函数demo</h3><p>回到递归函数，我们来用递归函数做一个不用循环完成1-100相加的功能</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line"><span class="comment">//不允许使用循环，计算1-100的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursive</span><span class="params">($n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>($n&gt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> $n + recursive($n<span class="number">-1</span>);</span><br><span class="line">		<span class="comment">//return $n=100 + recursive($100-1)</span></span><br><span class="line">		<span class="comment">//return $n=100 + return(recursive($100-1) + recursive($98-1))</span></span><br><span class="line">		<span class="comment">//因为后面还会递归运算，所以return会等待执行后面函数的执行完成</span></span><br><span class="line">		<span class="comment">//而每个函数都有自己的return，所以再满足条件的情况下就会循环嵌套起来</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> recursive(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
<h2 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h2><p>可变函数再某些程序中也称为变量函数，指的是如果一个变量后面又小括号，那么php将会尝试执行同名的函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str=<span class="string">'kinght'</span>;</span><br><span class="line">$str();</span><br></pre></td></tr></table></figure>
<p>我们在运行这个例子的时候，php报了一个错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Fatal error: Uncaught Error: Call to undefined function kinght() in E:\IDE\phpstudy\PHPTutorial\WWW\var_function.php:4 Stack trace: #0 &#123;main&#125; thrown in E:\IDE\phpstudy\PHPTutorial\WWW\var_function.php on line 4</span><br></pre></td></tr></table></figure>
<p>他说我们没有找到一个名为kinght的函数，可是我们调用的明明时$str()；这就是可变函数，php的引擎将会尝试解析这个变量的值为函数名称<br>变量函数的用途</p>
<ul>
<li>可以用于实现包括回调函数，函数表在内的用途</li>
<li>可变函数不能用于例如echo、print、unset、isset、empty、include、require以及类似的系统语言结构</li>
<li>可变函数可以用于调用对象的方法</li>
</ul>
<p>对上面的demo进行修改</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rec</span><span class="params">($n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	$func = <span class="keyword">__FUNCTION__</span>; <span class="comment">//获取函数名称</span></span><br><span class="line">	<span class="keyword">if</span>($n&gt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> $n + $func($n<span class="number">-1</span>);<span class="comment">//直接使用可变函数名</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> rec(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>2.PHP</category>
        <category>1.PHP基础</category>
      </categories>
      <tags>
        <tag>1.Web开发</tag>
        <tag>2.PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>8.PHP的系统函数库-字符函数库</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2.PHP/8.PHP%E7%9A%84%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0%E5%BA%93-%E5%AD%97%E7%AC%A6%E5%87%BD%E6%95%B0%E5%BA%93.html</url>
    <content><![CDATA[<p>函数我们以及了解过，是可以实现特定功能、可以重复执行的代码段。</p>
<p>我们之前学习了如何根据自己的需要来构建函数，我们称之为用户函数，不过PHP本身也为我们提供了一个庞大的函数库来减少我们的代码量，我们把它叫做内置函数，例如字符函数库、数学函数库</p>
<p>不过函数库太多了，我们只会了解其中比较常用的几个</p>
<hr>
<h1 id="字符函数库"><a href="#字符函数库" class="headerlink" title="字符函数库"></a>字符函数库</h1><p>由于字符函数库本身就属于PHP的组成部分，不需要单独安装，所以我们直接来了解一些常用函数</p>
<h2 id="字符长度函数"><a href="#字符长度函数" class="headerlink" title="字符长度函数"></a>字符长度函数</h2><h3 id="strlen函数"><a href="#strlen函数" class="headerlink" title="strlen函数"></a>strlen函数</h3><p>描述：用于获取字符长度</p>
<p>语法：strlen(string $str)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str1 = <span class="keyword">NULL</span>;	<span class="comment">//0</span></span><br><span class="line">$str2 = <span class="string">'AB'</span>;	<span class="comment">//2</span></span><br><span class="line">$str3 = <span class="string">'中国'</span>;	y<span class="comment">//6 UTF-8编码中:一个中文等于三个字节 </span></span><br><span class="line"><span class="keyword">echo</span> strlen($str1),strlen($str2),strlen($str3);</span><br></pre></td></tr></table></figure>
<h2 id="大小写转换函数"><a href="#大小写转换函数" class="headerlink" title="大小写转换函数"></a>大小写转换函数</h2><h3 id="strtolower函数"><a href="#strtolower函数" class="headerlink" title="strtolower函数"></a>strtolower函数</h3><p>描述：字符串转换为小写</p>
<p>语法：strtolower(string $str)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str1 = <span class="string">'HTML'</span>;	<span class="comment">//html</span></span><br><span class="line"><span class="keyword">echo</span> strtolower($str1);</span><br></pre></td></tr></table></figure>
<h3 id="strtoupper函数"><a href="#strtoupper函数" class="headerlink" title="strtoupper函数"></a>strtoupper函数</h3><p>描述：字符串转换为大写</p>
<p>语法：strtoupper(string $str)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str1 = <span class="string">'PHP'</span>;	<span class="comment">//HTML</span></span><br><span class="line"><span class="keyword">echo</span> strtoupper($str1);</span><br></pre></td></tr></table></figure>
<h3 id="ucfirst函数"><a href="#ucfirst函数" class="headerlink" title="ucfirst函数"></a>ucfirst函数</h3><p>描述：将句子首字母转换为大写</p>
<p>语法：ucfirst(string $str)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str1 = <span class="string">'this is test'</span>;</span><br><span class="line"><span class="keyword">echo</span> ucfirst($str1);	<span class="comment">//This is test</span></span><br></pre></td></tr></table></figure>
<h3 id="ucwords函数"><a href="#ucwords函数" class="headerlink" title="ucwords函数"></a>ucwords函数</h3><p>描述：将每个单词的首字母转换为大写</p>
<p>语法：ucwords(string $str)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str1 = <span class="string">'this is test'</span>;</span><br><span class="line"><span class="keyword">echo</span> ucwords($str1);	<span class="comment">//This Is Test</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串替换函数"><a href="#字符串替换函数" class="headerlink" title="字符串替换函数"></a>字符串替换函数</h2><h3 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace"></a>str_replace</h3><p>描述：实现字符串替换，区分大小写</p>
<p>语法：str_replace(‘被替换字符’,’替换字符’,string $str);</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str = <span class="string">'jAvascript'</span>;	<span class="comment">//jAvbscript	//注意大写A没被替换</span></span><br><span class="line"><span class="keyword">echo</span> str_replace(<span class="string">'a'</span>,<span class="string">'b'</span>,$str);<span class="comment">//将$str中的a全都替换成b</span></span><br></pre></td></tr></table></figure>
<h3 id="str-ireplace函数"><a href="#str-ireplace函数" class="headerlink" title="str_ireplace函数"></a>str_ireplace函数</h3><p>描述：实现字符串替换，不区分大小写</p>
<p>语法：str_ireplace(‘被替换字符’,’替换字符’,string $str);</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str = <span class="string">'jAvascript'</span>;	<span class="comment">//jbvbscript	//注意大写A被替换了</span></span><br><span class="line"><span class="keyword">echo</span> str_ireplace(<span class="string">'a'</span>,<span class="string">'b'</span>,$str);<span class="comment">//将$str中的a全都替换成b</span></span><br></pre></td></tr></table></figure>
<h2 id="与Html实体相关的函数"><a href="#与Html实体相关的函数" class="headerlink" title="与Html实体相关的函数"></a>与Html实体相关的函数</h2><h3 id="htmlspecialchars函数"><a href="#htmlspecialchars函数" class="headerlink" title="htmlspecialchars函数"></a>htmlspecialchars函数</h3><p>描述：预定义的字符转换为Html实体</p>
<p>语法：htmlspecialchars(string $string [, int $flags = ENT_COMPAT)</p>
<p>说明：$flags参数规定如何处理引号</p>
<ul>
<li>ENT_COMPAT -默认，仅编码双引号；</li>
<li>ENT_QUOTES -编码双引号和单引号</li>
<li>ENT_NOQUOTES -不编码任何引号<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str = <span class="string">"A&gt;B,B&lt;C,Tom&amp;John,He said:\"I'm Ok\""</span>;</span><br><span class="line"><span class="keyword">echo</span> htmlspecialchars($str),<span class="string">'&lt;br&gt;'</span>;	<span class="comment">//默认不添加参数，ENT_COMPAT仅编码双引号</span></span><br><span class="line"><span class="comment">//查看源文件:A&amp;gt;B,B&amp;lt;C,Tom&amp;amp;John,He said:&amp;quot;I'm Ok&amp;quot;&lt;br&gt;</span></span><br><span class="line"><span class="keyword">echo</span> htmlspecialchars($str,ENT_QUOTES),<span class="string">'&lt;br&gt;'</span>;	<span class="comment">//添加参数，编码双引号和单引号</span></span><br><span class="line"><span class="comment">//查看源文件:A&amp;gt;B,B&amp;lt;C,Tom&amp;amp;John,He said:&amp;quot;I&amp;#039;m Ok&amp;quot;&lt;br&gt;</span></span><br><span class="line"><span class="keyword">echo</span> htmlspecialchars($str,ENT_NOQUOTES),<span class="string">'&lt;br&gt;'</span>;<span class="comment">//添加参数，不编码任何引号</span></span><br><span class="line"><span class="comment">//查看源文件:A&amp;gt;B,B&amp;lt;C,Tom&amp;amp;John,He said:"I'm Ok"&lt;br&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="删除空格函数"><a href="#删除空格函数" class="headerlink" title="删除空格函数"></a>删除空格函数</h2></li>
</ul>
<h3 id="ltrim函数"><a href="#ltrim函数" class="headerlink" title="ltrim函数"></a>ltrim函数</h3><p>描述：实现删除字符串开始位置的空格或其他字符</p>
<p>语法：ltrim($str,‘charlist’);</p>
<p>说明：charlist规定从字符串中删除哪些字符，若省略该参数则删除全部字符</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200516100803878.png" alt="image-20200516100803878"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str = <span class="string">"\n\n\t\tAB\t\t\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> ltrim($str);</span><br></pre></td></tr></table></figure>
<p>效果如图：<br><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200516100743711.png" alt="image-20200516100743711"></p>
<p>查看源代码打开，我们发现蓝色部分只是为了更加明显，实际蓝色部分为空格字符，ltrim函数只删除前面的，它还可以添加参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str = <span class="string">"\n\n\t\tAB\t\t\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> ltrim($str,<span class="string">"\t"</span>);</span><br></pre></td></tr></table></figure>
<p>效果如图：<br><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200516100730266.png" alt="image-20200516100730266"></p>
<p>我们同样打开，会发现只删除了制表符没删除换行</p>
<h3 id="rtrim函数"><a href="#rtrim函数" class="headerlink" title="rtrim函数"></a>rtrim函数</h3><p>描述：实现删除字符串结束位置的空格或其他字符</p>
<p>语法：rtrim($str,‘charlist’);</p>
<h3 id="trim函数"><a href="#trim函数" class="headerlink" title="trim函数"></a>trim函数</h3><p>描述：实现删除字符串全部位置的空格或其他字符</p>
<p>语法：trim($str,‘charlist’);</p>
<h2 id="字符串位置相关函数"><a href="#字符串位置相关函数" class="headerlink" title="字符串位置相关函数"></a>字符串位置相关函数</h2><h3 id="strpos函数"><a href="#strpos函数" class="headerlink" title="strpos函数"></a>strpos函数</h3><p>描述：将返回一个字符串在另一个字符串第一次出现的位置</p>
<p>语法：strpos($被查找,$查找)</p>
<p>stripos函数</p>
<p>描述：将返回一个字符串在另一个字符串第一次出现的位置，忽略大小写</p>
<p>语法：stripos($被查找,$查找)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str1 = <span class="string">'javascript'</span>;</span><br><span class="line">$str2 = <span class="string">'script'</span>;</span><br><span class="line"><span class="keyword">echo</span> strpos($str1,$str2);<span class="comment">//字符串从0开始计数，如果没找到返回False</span></span><br></pre></td></tr></table></figure>
<h3 id="strrpos函数"><a href="#strrpos函数" class="headerlink" title="strrpos函数"></a>strrpos函数</h3><p>描述：将返回一个字符串在另外一个字符串的最后出现的位置</p>
<p>语法：strrpos($被查找,$查找)</p>
<h3 id="strripos函数"><a href="#strripos函数" class="headerlink" title="strripos函数"></a>strripos函数</h3><p>描述：将返回一个字符串在另外一个字符串的最后出现的位置，区分大小写</p>
<p>语法：strripos($被查找,$查找)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str1 = <span class="string">'javascript'</span>;</span><br><span class="line">$str2 = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">echo</span> strrpos($str1,$str2);<span class="comment">//字符串从0开始计数，如果没找到返回False</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><h3 id="substr函数"><a href="#substr函数" class="headerlink" title="substr函数"></a>substr函数</h3><p>描述：实现截取字符串</p>
<p>语法：substr($被截取字符串,$截取位置,$截取多长)</p>
<p>说明：省略长度则是从截取位置至末尾，若长度和位置为负数，则倒数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str1 = <span class="string">'javascript'</span>;</span><br><span class="line"><span class="comment">//序号从0开始截取到序号4</span></span><br><span class="line"><span class="keyword">echo</span> substr($str1,<span class="number">0</span>,<span class="number">4</span>),<span class="string">'&lt;br&gt;'</span>; <span class="comment">//java</span></span><br><span class="line"><span class="keyword">echo</span> substr($str1,<span class="number">4</span>),<span class="string">'&lt;br&gt;'</span>;<span class="comment">//script</span></span><br><span class="line"><span class="keyword">echo</span> substr($str1,<span class="number">-2</span>),<span class="string">'&lt;br&gt;'</span>;<span class="comment">//pt</span></span><br><span class="line"><span class="keyword">echo</span> substr($str1,<span class="number">-5</span>,<span class="number">-2</span>),<span class="string">'&lt;br&gt;'</span>;<span class="comment">//cri</span></span><br></pre></td></tr></table></figure>
<h3 id="strstr函数"><a href="#strstr函数" class="headerlink" title="strstr函数"></a>strstr函数</h3><p>描述：查找截取</p>
<p>语法：strstr($被截取字符串,$查询字符串)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str1 = <span class="string">'javascript'</span>;</span><br><span class="line">$str2 = <span class="string">'s'</span>;</span><br><span class="line"><span class="keyword">echo</span> strstr($str1,$str2);	<span class="comment">//script</span></span><br></pre></td></tr></table></figure>
<h3 id="strrchr函数"><a href="#strrchr函数" class="headerlink" title="strrchr函数"></a>strrchr函数</h3><p>描述：从右查找截取</p>
<p>语法：strrchr($被截取字符串,$查询字符串)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str1 = <span class="string">'book.kinght.me'</span>;</span><br><span class="line"><span class="keyword">echo</span> strrchr($str1,<span class="string">'.'</span>);	<span class="comment">//script</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串反转函数"><a href="#字符串反转函数" class="headerlink" title="字符串反转函数"></a>字符串反转函数</h2><h3 id="strrev函数"><a href="#strrev函数" class="headerlink" title="strrev函数"></a>strrev函数</h3><p>描述：反转字符串</p>
<p>语法：strrev($字符串)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str1 = <span class="string">'book.kinght.me'</span>;</span><br><span class="line"><span class="keyword">echo</span> strrev($str1);<span class="comment">//em.thgnik.koob</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串加密函数"><a href="#字符串加密函数" class="headerlink" title="字符串加密函数"></a>字符串加密函数</h2><h3 id="md5函数"><a href="#md5函数" class="headerlink" title="md5函数"></a>md5函数</h3><p>描述：计算字符串的md5哈希值</p>
<p>语法：md5($str);</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str = <span class="string">'kinght'</span>;</span><br><span class="line"><span class="keyword">echo</span> md5($str);<span class="comment">//3e5147059064fcb0cc57376e42afce83</span></span><br></pre></td></tr></table></figure>
<h3 id="str-shuffle函数"><a href="#str-shuffle函数" class="headerlink" title="str_shuffle函数"></a>str_shuffle函数</h3><p>描述：随机打乱字符串</p>
<p>语法：str_shuffle($str)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*简易验证码*/</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str = <span class="string">'dsfdsghrehujoehroijntgoiwngoisdhglht'</span>;</span><br><span class="line">$str = str_shuffle($str);	<span class="comment">//打乱字符串,每次刷新都会改变</span></span><br><span class="line"><span class="keyword">echo</span> substr($str,<span class="number">0</span>,<span class="number">4</span>);<span class="comment">//截取</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h2><h3 id="explode函数"><a href="#explode函数" class="headerlink" title="explode函数"></a>explode函数</h3><p>描述：用一个字符串分割另一个字符串，分割结果为数组</p>
<p>语法：explode($分割数组,$被拆分数组)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$str = <span class="string">'a|b|c|d'</span>;</span><br><span class="line">$arr = explode(<span class="string">'|'</span>,$str);</span><br><span class="line">print_r($arr);<span class="comment">//Array ( [0] =&gt; a [1] =&gt; b [2] =&gt; c [3] =&gt; d )</span></span><br></pre></td></tr></table></figure>
<h3 id="implode函数"><a href="#implode函数" class="headerlink" title="implode函数"></a>implode函数</h3><p>描述：一维数组转换为字符串</p>
<p>语法：implode(‘链接符号’，目标数组)</p>
<p>说明：连接符号可不写，默认为空白</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'Jacklove'</span>,<span class="string">'Theshy'</span>,<span class="string">'Rookie'</span>);</span><br><span class="line"><span class="keyword">echo</span> implode($arr),<span class="string">'&lt;br&gt;'</span>;<span class="comment">//JackloveTheshyRookie</span></span><br><span class="line"><span class="keyword">echo</span> implode(<span class="string">';'</span>,$arr),<span class="string">'&lt;br&gt;'</span>;<span class="comment">//Jacklove;Theshy;Rookie</span></span><br></pre></td></tr></table></figure>
<h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><h3 id="sprintf函数"><a href="#sprintf函数" class="headerlink" title="sprintf函数"></a>sprintf函数</h3><p>描述：格式化字符</p>
<p>文档网址:<a href="https://www.php.net/manual/zh/function.sprintf.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.sprintf.php</a></p>
<p>语法： sprintf ( string $format [, mixed $… ] ) : string</p>
<ul>
<li>%%返回一个百分号</li>
<li>%d包含正负号的十进制数字</li>
<li>%s字符串</li>
<li>%b二进制数</li>
<li>%e使用小写的科学计数法(1.2e+2)</li>
<li>%f浮点数<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$number = <span class="number">5</span>;</span><br><span class="line">$str = <span class="string">'chengdu'</span>;</span><br><span class="line">$txt = sprintf(<span class="string">'there are %u million cars in %s'</span>,$number,$str);</span><br><span class="line"><span class="keyword">echo</span> $txt;</span><br></pre></td></tr></table></figure>
说明：如果%符号多余arg参数，则必须使用占位符，占位符位于%符号之后，由数字和’$‘组成<br>$format参数</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$number1 = <span class="number">123</span>;</span><br><span class="line">$number2 = <span class="number">456</span>;</span><br><span class="line">$txt = sprintf(<span class="string">"带有两位小数点的结果为:%1\$.2f和%2\$.2f,不带小数点的为%1\$d和%2\$d"</span>,$number1,$number2);</span><br><span class="line"><span class="keyword">echo</span> $txt;</span><br><span class="line"><span class="comment">//%1\$指的是目标函数为逗号后第一个变量，%2\$即为第二个</span></span><br><span class="line"><span class="comment">//.2f是指小数点后两位</span></span><br><span class="line"><span class="comment">//输出结果为：带有两位小数点的结果为:123.00和456.00,不带小数点的为123和456</span></span><br></pre></td></tr></table></figure>
<p>附加格式值(必须放在%和字母之间(%2f))</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200516100516131.png" alt="image-20200516100516131"></p>
]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>2.PHP</category>
        <category>1.PHP基础</category>
      </categories>
      <tags>
        <tag>1.Web开发</tag>
        <tag>2.PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>1.初识Java</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4.Java/1.%E5%88%9D%E8%AF%86Java.html</url>
    <content><![CDATA[<h1 id="Java简介"><a href="#Java简介" class="headerlink" title="Java简介"></a>Java简介</h1><p>从1996年Java发布以来就受到了世界的广泛关注，一度占据了世界编程语言排行榜的前三。相比于同属面向对象语言的C++，他抛弃了头文件、指针运算、结构、联合、操作符重载、虚基类等概念，巧妙的使用了Java虚拟机(JVM)完成了跨平台的应用，加上它丰富的例程库、完善的编译器、以及不遗余力维护的安全性，这些逐渐都使它成为了一个历史性的编程语言。</p>
<blockquote>
<p>Java历史：<a href="https://baike.baidu.com/item/Java/85979" target="_blank" rel="noopener">https://baike.baidu.com/item/Java/85979</a></p>
</blockquote>
<h2 id="Java优势总结"><a href="#Java优势总结" class="headerlink" title="Java优势总结"></a>Java优势总结</h2><ul>
<li>简单易学；</li>
<li>面向对象（封装，继承，多态）；</li>
<li>平台无关性（ Java 虚拟机实现平台无关性）；</li>
<li>可靠性；</li>
<li>安全性；</li>
<li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li>
<li>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</li>
<li>编译与解释并存；</li>
</ul>
<blockquote>
<p>修正（参见： <a href="https://github.com/Snailclimb/JavaGuide/issues/544" target="_blank" rel="noopener">issue#544</a>）：C++11开始（2011年的时候）,C++就引入了多线程库，在windows、linux、macos都可以使用<code>std::thread</code>和<code>std::async</code>来创建线程。参考链接：<a href="http://www.cplusplus.com/reference/thread/thread/?kw=thread" target="_blank" rel="noopener">http://www.cplusplus.com/reference/thread/thread/?kw=thread</a></p>
</blockquote>
<h2 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h2><p>Java虚拟机是支撑Java程序运行的核心，他是运行 Java 字节码的平台，争对于不同的平台，所使用的机器码是不同的，这是导致软件不能跨平台的核心，而Java虚拟机和字节码的出现解决了这个问题。</p>
<h2 id="什么是字节码"><a href="#什么是字节码" class="headerlink" title="什么是字节码?"></a>什么是字节码?</h2><p>在 Java 中，JVM可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code>  的文件），它不面向任何特定的处理器，只面向虚拟机。Java  语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java  程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机上运行。</p>
<h2 id="Java程序编译运行流程"><a href="#Java程序编译运行流程" class="headerlink" title="Java程序编译运行流程"></a>Java程序编译运行流程</h2><p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200209125700008.png" alt="image-20200209125700008"></p>
<p>我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM  类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而JIT 属于运行时编译。当 JIT  编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java  解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p>
<blockquote>
<p>HotSpot采用了惰性评估(Lazy  Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是JIT所需要编译的部分。JVM会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9引入了一种新的编译模式AOT(Ahead of Time  Compilation)，它是直接将字节码编译成机器码，这样就避免了JIT预热等各方面的开销。JDK支持分层编译和AOT协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。</p>
</blockquote>
<p>总结来说，Java虚拟机是用于运行Java字节码文件的，不同平台的JVM所对应的机器码是不相同的，程序员只需要将源代码编译成.class字节码文件后，就可以在不同平台使用相对于的虚拟机做到一次编译四处运行了。</p>
<h2 id="Java组件包"><a href="#Java组件包" class="headerlink" title="Java组件包"></a>Java组件包</h2><p>Java的安装包根据用途的不同分为JDK和JRE</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200209145619944.png" alt="image-20200209145619944"></p>
<h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><p>Java Runtime Environment Java运行环境</p>
<p>它是运行已编译 Java 程序所需的所有内容的集合，包括 Java虚拟机（JVM），Java类库，java命令和其他的一些基础构件。但是，它不能用于创建新程序。</p>
<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>Java Development Kit Java开发环境</p>
<p>它是功能齐全的Java SDK。它拥有JRE所拥有的一切，还有编译器（javac）和工具（如javadoc和jdb）。它能够创建和编译程序。</p>
<p>如图所示，JDK包含了JRE，如果只是为了运行一下 Java 程序的话，那么只需要安装 JRE 就可以了，如果需要进行开发就需要安装JDK了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何Java开发，仍然需要安装JDK。例如，如果要使用JSP部署Web应用程序，那么从技术上讲，您只是在应用程序服务器中运行Java程序。那你为什么需要JDK呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p>
<hr>
<h1 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h1><h2 id="第一个Java程序-1"><a href="#第一个Java程序-1" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><p>为了更直观的了解Java程序的编译流程，我们首先使用记事本来敲第一个程序，创建记事本，将如下代码敲入其中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstSample</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Helloworld"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将其保存文件名为</p>
<blockquote>
<p>FirstSample.java</p>
</blockquote>
<p>打开命令行窗口，跳转到当前目录</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">javac FirstSample.java</span><br></pre></td></tr></table></figure>

<p>我们可以发现在目录下出现了一个新的文件</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200210113754479.png" alt="image-20200210113754479"></p>
<p>这个就是之前提到的字节码</p>
<p>然后我们使用java虚拟机来运行它</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java FirstSample</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这里并不加.class后缀</p>
</blockquote>
<p>我们就能够看到输出的结果</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200210113924211.png" alt="image-20200210113924211"></p>
<h2 id="Java的程序结构基础"><a href="#Java的程序结构基础" class="headerlink" title="Java的程序结构基础"></a>Java的程序结构基础</h2><p>从上文程序由内而外可以分为三个板块</p>
<h3 id="1-类-class"><a href="#1-类-class" class="headerlink" title="1.类(class)"></a>1.类(class)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstSample</span></span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Java中类是一个加载程序逻辑的容器，程序逻辑定义了程序的行为，Java程序中的全部内容都会包含在类里。</p>
<p>关键字public被称为访问修饰符，访问修饰符控制了程序其他部分对这段代码的访问级别，在后续，我们将会对访问修饰符单独拿出来进行讲解。</p>
<p>关键字class后面紧跟的是类名，Java规定类名必须和文件名相同。</p>
<h4 id="Java对类名的命名规定"><a href="#Java对类名的命名规定" class="headerlink" title="Java对类名的命名规定"></a>Java对类名的命名规定</h4><ul>
<li>名字必须以字母开头</li>
<li>后面是字母和数字的组合字符</li>
<li>长度没有限制</li>
<li>但不能使用Java保留字</li>
</ul>
<p>但是为了能够在程序里更加容易让程序员识别类名，所以通常情况下对类名有了补充要求(编译器不会报错)</p>
<h4 id="大驼峰命名法"><a href="#大驼峰命名法" class="headerlink" title="大驼峰命名法"></a>大驼峰命名法</h4><ul>
<li>类名是以大写字母开头的名词</li>
<li>如果名字有多个单词，每个单词开头都应大写</li>
<li>命名最好能反映出其作用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-主方法-main"><a href="#2-主方法-main" class="headerlink" title="2.主方法(main)"></a>2.主方法(main)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主方法是嵌套在类里的，主方法的作用是运行已编译程序的时候，作为程序的开始运行的入口，所以，为了代码能够指向，程序必须有一个主方法。</p>
<p>主方法的格式以及命名都是固定的，不能进行修改。</p>
<blockquote>
<p>根据<a href="http://docs.oracle.com/javase/specs" target="_blank" rel="noopener">Java语言规范</a>,main方法必须声明为public，但是不是public时，JavaSE1.4以前有些解释器同样能够正确执行Java程序。</p>
</blockquote>
<h3 id="3-程序语句"><a href="#3-程序语句" class="headerlink" title="3.程序语句"></a>3.程序语句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"Helloworld"</span>);</span><br></pre></td></tr></table></figure>

<p>程序语句的不同组合，组成了数不清的程序，他代表了程序的具体功能和逻辑，在这一距离，表示着，系统输出打印Helloworld并换行，在Java中，程序语句必须用分号结束。</p>
<hr>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>在程序员阅读代码的时候，为了方便理解，通常需要对代码功能结构、关键函数等信息进行文字备注，而这一部分的代码不会也不能出现在可执行程序中，而程序也不必担心这一部分代码在编译完成后导致可执行膨胀，这部分内容叫做注释</p>
<p>Java的注释有三种</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//双斜杠注释，从注释处到行结尾</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*多行注释</span></span><br><span class="line"><span class="comment">被包裹内容全部注释*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">文档注释,多行注释的基础上，会自动生成备注文档</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">咸鱼日记</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> kinght</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>注意：注释内容是不允许嵌套的。</p>
]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>4.Java</category>
        <category>1.Java基础</category>
      </categories>
      <tags>
        <tag>3.Java</tag>
        <tag>1.Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>2.变量与常量</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4.Java/2.%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F.html</url>
    <content><![CDATA[<p>Java是一种强类型的语言，每一个量的使用之前，都需要声明类型以便分配对应大小的内存空间用于存放这个量的值，而数据类型的不同决定着这个空间大小的不同。</p>
<p>Java中有4种整型、2种浮点类型、1种用于表达Unicode编码的字符类型char以及1种用于表示真假值的boolean类型。</p>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><p>整型用于表示没有小数部分的数值，它可以为负数，Java种提供了四种整形。</p>
<table>
<thead>
<tr>
<th align="left">Java整型</th>
<th align="left"></th>
<th align="left"></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">类型</td>
<td align="left">存储需求</td>
<td align="left">取值范围</td>
<td align="left">默认值</td>
</tr>
<tr>
<td align="left">byte</td>
<td align="left">1字节</td>
<td align="left">-128~127</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">2字节</td>
<td align="left">-32768~32767</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">4字节</td>
<td align="left">-2,147,483,648~2,147,483,647</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">8字节</td>
<td align="left">-9,223,372,036,854,775,808~9,223,372,036,854,775,807</td>
<td align="left">0L</td>
</tr>
</tbody></table>
<p>通常，int是最常用的整型类型，long用于特大数字例如地球上居住人数，byte和short通常用于需要严格控制储存空间大小的情况。</p>
<blockquote>
<p>Java程序由于必须要保证在所有机器上都能得到相同的运行结果，所以在Java中，各种数据类型的范围与运行程序的机器无关，这一点与C\C++有区别</p>
<p>注意：Java没有任何无符号形势的整型类型</p>
</blockquote>
<h5 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h5><p>在计算机的世界里，除了最常用的十进制以外，还有二进制八进制十六进制也比较常见，而我们在赋值的时候需要对不同的进制数进行区分</p>
<table>
<thead>
<tr>
<th align="left">字面值</th>
<th align="left"></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">进制</td>
<td align="left">字面值符号</td>
<td align="left">例子</td>
</tr>
<tr>
<td align="left">十进制</td>
<td align="left"></td>
<td align="left">12,13,48</td>
</tr>
<tr>
<td align="left">二进制</td>
<td align="left">0b</td>
<td align="left">0b1001</td>
</tr>
<tr>
<td align="left">八进制</td>
<td align="left">0</td>
<td align="left">037</td>
</tr>
<tr>
<td align="left">十六进制</td>
<td align="left">0x</td>
<td align="left">0XABCD</td>
</tr>
</tbody></table>
<h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><p>浮点类型用于表示有小数部分的数值</p>
<table>
<thead>
<tr>
<th align="left">Java浮点数</th>
<th align="left"></th>
<th align="left"></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">类型</td>
<td align="left">存储需求</td>
<td align="left">取值范围</td>
<td align="left">默认值</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">4字节</td>
<td align="left">大约小数点后6-7位</td>
<td align="left">0.0f</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">8字节</td>
<td align="left">大约小数点后15位</td>
<td align="left">0.0d</td>
</tr>
</tbody></table>
<p>double表示这种类型的数值精度是float的两倍，所以也有人叫他为双精度类型，在使用赋值的时候，float值需要在后面加一个f或者F,例如：3.14f，如果不加，则会被计算机默认为double类型</p>
<blockquote>
<p>所有浮点数值的计算都遵循IEEE754规范</p>
<p>简单来说，表示溢出、出错的情况有三个特殊的浮点值：</p>
<ul>
<li><p>正无穷</p>
</li>
<li><p>负无穷</p>
</li>
<li><p>NaN</p>
<p>例如：一个正整数除以0结果为正无穷，计算0/0或负数平方根为NaN</p>
</li>
</ul>
</blockquote>
<p>注意：由于浮点数精确度问题，所以它并不适合无法接受舍入误差的金融计算中，如果数值无法接受任何的舍入误差，请使用BigDecimal类</p>
<h4 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h4><p>char类型表示单个字符</p>
<p>char类型的字面值要用单引号括起来</p>
<h4 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h4><p>boolean类型只有两个值：false和true，通常用于判断逻辑条件，且，整型值和布尔值之间不能进行相互转换</p>
<blockquote>
<p>为什么没有字符串？</p>
<p>String 表示的是字符串对象，Java 中将字符串作为对象处理，而不是基本数据类型。在基本数据类型中，与String 比较相似的是字符类型（char），该类型变量只能表示一个字符长度，如‘a’。为char 类型赋值要使用单引号，为String 类型对象赋值要使用双引号。</p>
</blockquote>
<h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>引用数据类型有三个类、接口、数组，在后续章节会单独讲述。</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>从严格意义来说，Java的字符串系统并不属于数据类型的一种，它其实是Unicode字符串序列，例如Java是由五个Unicode字符组成的，而为了方便使用在Java的标准类库中提供了一个预定义的类，叫做String，并且规定了，字符串的值由双引号括起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a = <span class="string">"Helloworld"</span>;</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>之前我们提到过，在程序当中，每一个量都有自己的存放空间，如果这个存放空间里面的值是可以变化的，我们把这个量叫做变量</p>
<p>变量格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型 变量名；</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">long</span> b;</span><br><span class="line"><span class="keyword">short</span> c;</span><br></pre></td></tr></table></figure>

<p>我们可以看到，每个声明以分号结束，变量名满足标识符命名规则</p>
<h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><ul>
<li>标识符可以由字母、数字、下划线（_）和美元符($）组成，不能以数字开头</li>
<li>标识符严格区分大小写</li>
<li>标识符不能是Java关键字和保留字</li>
<li>标识符的命名最好能反映出其作用</li>
</ul>
<h4 id="小驼峰命名法"><a href="#小驼峰命名法" class="headerlink" title="小驼峰命名法"></a>小驼峰命名法</h4><p>和大驼峰命名法类似，为了更好的在程序中分辨出哪些是变量的名字,我们通常对变量名采用小驼峰命名法</p>
<ul>
<li>类名是以小写字母开头的名词</li>
<li>名字有多个单词，除第一个单词首字母，每个单词开头都应大写</li>
<li>命名最好能反映出其作用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String dogName = <span class="string">"旺旺"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h3><p>在声明一个变量之后，我们需要使用赋值语句对变量进行初始化操作。</p>
<p>赋值语句的使用方法是：变量名 = 表达式(值);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">a = <span class="number">10</span>;<span class="comment">//a的值为10</span></span><br><span class="line"><span class="comment">/*也可以在变量声明时初始化(声明变量并赋值)*/</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">10.25</span>;</span><br><span class="line"><span class="keyword">float</span> c = <span class="number">9.9f</span>;</span><br></pre></td></tr></table></figure>

<p>在Java中，变量的声明尽可能的靠近变量第一次使用的地方，这是一种良好的编写习惯。</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量差距不多，但是常量的值在经过第一次赋值之后，不允许二次赋值</p>
<p>常量格式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> 数据类型 变量名；</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> A;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> B;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">short</span> C;</span><br></pre></td></tr></table></figure>

<p>常量同样要求满住标识符的命名规范，但在编写程序的时候，为了和变量做区分，我们通常将常量全部大写</p>
<h3 id="类常量"><a href="#类常量" class="headerlink" title="类常量"></a>类常量</h3><p>在Java中，有时需要一个常量在一个类的多个方法中反复调用，通常我们将这个常量在方法外面，使用static final设置成类常量</p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> p = <span class="number">3.14</span>;</span><br><span class="line">    <span class="comment">//p值为类常量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>在程序中，我们经常需要将一种数值类型转换为另一种数值类型来进行应用</p>
<p>类型转换分为自动类型转换和强制类型转换</p>
<h3 id="自动类型转换-隐式转换"><a href="#自动类型转换-隐式转换" class="headerlink" title="自动类型转换(隐式转换)"></a>自动类型转换(隐式转换)</h3><p>在运算中，指的是小空间数据类型转向大空间数据类型。</p>
<p><a href="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200214155102776.png" target="_blank" rel="noopener"><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200214155102776.png" alt="image-20200214155102776"></a></p>
<p>由于小空间的数值本身就小于大空间，小物品放在大物品里，不会发生任何的变化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">short</span> b = <span class="number">10</span>;</span><br><span class="line">a = b;</span><br></pre></td></tr></table></figure>

<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>而强制类型转换就恰恰相反，通常用于，把大空间的值放到小空间里，那么就可能存在小空间放不下的情况，所以小空间会把放不下的那部分给丢掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> d＝<span class="number">123.4</span>;</span><br><span class="line"><span class="keyword">float</span> f=(<span class="keyword">float</span>)d;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>4.Java</category>
        <category>1.Java基础</category>
      </categories>
      <tags>
        <tag>3.Java</tag>
        <tag>1.Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>4.流程控制语句</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4.Java/4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5.html</url>
    <content><![CDATA[<p>编程其实就是通过程序语言来告诉计算机每一步该做怎样的事情，计算机默认是从上而下依次执行命令，但通常我们会遇到需要重复做的事情和需要根据不同的情况来判断一些该做或者不该做的事情，这就是流程控制的工作</p>
<hr>
<h1 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h1><p>在了解控制结构之前，我们必须搞清楚块的概念</p>
<p>块，指的是一个大括号括起来的若干条Java语句集合，它的本质是作用域的划分</p>
<p>并且块与块之间是可以嵌套的，且有嵌套关系的块内函数不允许被多次定义</p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    ...</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">20</span>;</span><br><span class="line">        System.out.println(a);	<span class="comment">//输出结果:a = 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(k);	<span class="comment">//输出结果：报错，找不到k</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中，我已经将结果给出</p>
<p>块的定义就是作用域，变量a所在的块嵌套了变量k所在的块，变量a的作用域是覆盖了第一条输出语句，所以能够正常输出，而变量k的值的作用域没有覆盖到输出k语句里面，所以k报错</p>
<blockquote>
<p>C++注释：在C++中，可以在嵌套的块中重定义一个变量，在内层定义的变量会覆盖在外层定义的变量，而Java不允许这样做</p>
</blockquote>
<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>在进行编程的时候，我们通常会遇到需要判断执行方向的情况</p>
<blockquote>
<p>案例引用：作为收银员，顾客结账，我们需要判断他支付的金额是否足够支付商品费用？支付金额正好等于售价，予以放行。大于售价，需要找零。小于售价，需要告知顾客还需支付多少…</p>
</blockquote>
<h2 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h2><p>基础结构1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件)</span><br><span class="line">&#123;</span><br><span class="line">...执行语句(若执行语句只有一句，可省略大括号);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果判断条件成立，则执行大括号内语句，反之不执行。</p>
<p>基础结构2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件)</span><br><span class="line">&#123;</span><br><span class="line">...执行语句<span class="number">1</span>(若执行语句只有一句，可省略大括号);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">...执行语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果判断条件成立，则执行大括号内语句，反之执行语句2。</p>
<p>基础结构3：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">...执行语句<span class="number">1</span>(若执行语句只有一句，可省略大括号);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(判断条件<span class="number">2</span>)&#123;</span><br><span class="line">...执行语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果判断条件1成立，则执行大括号内语句，反之进行判断语句2。如果2成真则执行语句2</p>
<p>语句内容可以无限往下延展，也可以嵌套进行。</p>
<p>嵌套结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(判断条件<span class="number">2</span>)&#123;</span><br><span class="line">        ...执行语句</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ...执行语句</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">...执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>案例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sellingPrice = <span class="number">10</span>; <span class="comment">//商品售价为10</span></span><br><span class="line">		<span class="keyword">int</span> payMent = <span class="number">14</span>; <span class="comment">//支付了14元</span></span><br><span class="line">		<span class="keyword">if</span>(sellingPrice == payMent)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"支付完成，欢迎下次光临"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(sellingPrice &gt; payMent)&#123;</span><br><span class="line">			System.out.println(<span class="string">"您还需要支付"</span>+(sellingPrice-payMent)+<span class="string">"元"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"找零"</span>+(payMent-sellingPrice)+<span class="string">"元，欢迎下次光临"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，有的情况每次都进行if…else…判断又太麻烦了，会导致代码量爆炸，例如：</p>
<blockquote>
<p>案例引用：从键盘输入1-7之间的任意数字，转换成星期进行输出</p>
</blockquote>
<h2 id="switch结构"><a href="#switch结构" class="headerlink" title="switch结构"></a>switch结构</h2><p>基础结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">1</span>:语句<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">2</span>:语句<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">3</span>:语句<span class="number">3</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个判断结构和if..else..有一定的区别，if…else…他判断的是if括号里的内容是否为真，如果是真他就执行。</p>
<p>switch语句则是表达式是一个常量值，当switch后括号的值和case后面的常量表达式的值相同，就执行表达式冒号后面的语句。</p>
<blockquote>
<p>注意：我们的基本结构中使用了break语句，他的意思是，当我们执行到了break，就跳出这个结构，不再进行判断了。</p>
</blockquote>
<p>案例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> week = sc.nextInt();</span><br><span class="line">		<span class="keyword">switch</span> (week)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:System.out.println(<span class="string">"Monday"</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:System.out.println(<span class="string">"Tuesday"</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:System.out.println(<span class="string">"Wednesday"</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:System.out.println(<span class="string">"Thursday"</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:System.out.println(<span class="string">"Friday"</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">6</span>:System.out.println(<span class="string">"Saturday"</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">7</span>:System.out.println(<span class="string">"Sunday"</span>);<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用Scanner对象进行数据输入</p>
<p><a href="https://www.runoob.com/java/java-scanner-class.html" target="_blank" rel="noopener">Java  Scanner 类</a></p>
</blockquote>
<hr>
<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p>说完条件语句，现在轮到循环的登场了，从名字可以看出，循环语句就是多次重复语句覆盖内容，可能会有小伙伴们问，我多打几次语句内容不就行了吗？</p>
<blockquote>
<p>案例引用：假设两个数为1-100的整数，他们相乘可能是哪些值？</p>
</blockquote>
<h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>while循环是最基本的循环结构，只要while后括号内参数为真，这个循环就会一直持续</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式) &#123;</span><br><span class="line">  <span class="comment">//循环内容(可嵌套循环)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>案例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(a&lt;=<span class="number">100</span>)&#123;a</span><br><span class="line">			b = <span class="number">1</span>;  <span class="comment">//把b归零</span></span><br><span class="line">			<span class="keyword">while</span>(b&lt;=a)&#123;</span><br><span class="line">				<span class="keyword">int</span> c = a*b;</span><br><span class="line">				System.out.println(c);</span><br><span class="line">				b++;</span><br><span class="line">			&#125;</span><br><span class="line">			a++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码是分别对a,b进行了1-100的循环，外层循环a，内层循环b，不过由于乘法交换位置结果不变，所以我让b&lt;=a来减少代码运行量，然后在内层循环完成乘法然后输出</p>
<h2 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h2><p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p>
<p>布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	<span class="comment">//代码语句(可嵌套循环)</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure>

<p>案例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">do</span>&#123;</span><br><span class="line">			b=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">do</span>&#123;</span><br><span class="line">				System.out.println(a*b);</span><br><span class="line">				b++;</span><br><span class="line">			&#125;<span class="keyword">while</span>(b&lt;=a);</span><br><span class="line">			a++;</span><br><span class="line">		&#125;<span class="keyword">while</span>(a&lt;=<span class="number">100</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>虽然所有循环结构都可以用 while 或者 do…while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。</p>
<p>for循环执行的次数是在执行前就确定的。语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class="line">    <span class="comment">//代码语句(可嵌套循环)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于 for 循环有以下几点说明：</p>
<ul>
<li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li>
<li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li>
<li>执行一次循环后，更新循环控制变量。</li>
<li>再次检测布尔表达式。循环执行上面的过程。</li>
</ul>
<p>案例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;=<span class="number">100</span>;a++)&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">1</span>;b&lt;=a;b++)&#123;</span><br><span class="line">            System.out.println(a*b);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java-增强-for-循环"><a href="#Java-增强-for-循环" class="headerlink" title="Java 增强 for 循环"></a>Java 增强 for 循环</h3><p>Java5 引入了一种主要用于数组的增强型 for 循环，有点类似于Python的遍历。</p>
<p>Java 增强 for 循环语法格式如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式) &#123;</span><br><span class="line">    <span class="comment">//代码句子 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>声明语句：</strong>声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>
<p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/A71EC47E-BC53-4923-8F88-B027937EE2FF.jpg" alt="img"></p>
<p>Demo代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers )&#123;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">","</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">      String [] names =&#123;<span class="string">"James"</span>, <span class="string">"Larry"</span>, <span class="string">"Tom"</span>, <span class="string">"Lacy"</span>&#125;;</span><br><span class="line">      <span class="keyword">for</span>( String name : names ) &#123;</span><br><span class="line">         System.out.print( name );</span><br><span class="line">         System.out.print(<span class="string">","</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="流程控制关键字"><a href="#流程控制关键字" class="headerlink" title="流程控制关键字"></a>流程控制关键字</h1><p>关于流程控制语句还有两个相关关键字比较重要</p>
<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p>
<p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p>
<p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>continue 就是循环体中一条简单的语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers ) &#123;</span><br><span class="line">         <span class="keyword">if</span>( x == <span class="number">30</span> ) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p>
<p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>break 的用法很简单，就是循环结构中的一条语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers ) &#123;</span><br><span class="line">         <span class="comment">// x 等于 30 时跳出循环</span></span><br><span class="line">         <span class="keyword">if</span>( x == <span class="number">30</span> ) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>4.Java</category>
        <category>1.Java基础</category>
      </categories>
      <tags>
        <tag>3.Java</tag>
        <tag>1.Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>3.运算符</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4.Java/3.%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<p>计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，Java也提供了一套丰富的运算符来操纵变量。我们可以把运算符分成以下几组：</p>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>假设整数变量A的值为10，变量B的值为20：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法 - 相加运算符两侧的值</td>
<td>A + B 等于 30</td>
</tr>
<tr>
<td>-</td>
<td>减法 - 左操作数减去右操作数</td>
<td>A – B 等于 -10</td>
</tr>
<tr>
<td>*</td>
<td>乘法 - 相乘操作符两侧的值</td>
<td>A * B等于200</td>
</tr>
<tr>
<td>/</td>
<td>除法 - 左操作数除以右操作数</td>
<td>B / A等于2</td>
</tr>
<tr>
<td>％</td>
<td>取余 - 左操作数除以右操作数的余数</td>
<td>B%A等于0</td>
</tr>
<tr>
<td>++</td>
<td>自增: 操作数的值增加1</td>
<td>B++ 或 ++B 等于 21（区别详见下文）</td>
</tr>
<tr>
<td>–</td>
<td>自减: 操作数的值减少1</td>
<td>B– 或 –B 等于 19（区别详见下文）</td>
</tr>
</tbody></table>
<p>代码demo</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">     <span class="keyword">int</span> c = <span class="number">25</span>;</span><br><span class="line">     <span class="keyword">int</span> d = <span class="number">25</span>;</span><br><span class="line">     System.out.println(<span class="string">"a + b = "</span> + (a + b) );</span><br><span class="line">     System.out.println(<span class="string">"a - b = "</span> + (a - b) );</span><br><span class="line">     System.out.println(<span class="string">"a * b = "</span> + (a * b) );</span><br><span class="line">     System.out.println(<span class="string">"b / a = "</span> + (b / a) );</span><br><span class="line">     System.out.println(<span class="string">"b % a = "</span> + (b % a) );</span><br><span class="line">     System.out.println(<span class="string">"c % a = "</span> + (c % a) );</span><br><span class="line">     System.out.println(<span class="string">"a++   = "</span> +  (a++) );</span><br><span class="line">     System.out.println(<span class="string">"a--   = "</span> +  (a--) );</span><br><span class="line">     <span class="comment">// 查看  d++ 与 ++d 的不同</span></span><br><span class="line">     System.out.println(<span class="string">"d++   = "</span> +  (d++) );</span><br><span class="line">     System.out.println(<span class="string">"++d   = "</span> +  (++d) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运算结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">进行自增运算后的值等于<span class="number">4</span></span><br><span class="line">进行自减运算后的值等于<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><p>自增（++）自减（–）运算符是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。</p>
<p>前缀自增自减法(++a,–a):先进行自增或者自减运算，再进行表达式运算。</p>
<p>后缀自增自减法(a++,a–): 先进行表达式运算，再进行自增或者自减运算。</p>
<p>代码demo</p>
<p>selfAddMinus.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selfAddMinus</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">2</span>*++a;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">2</span>*b++;</span><br><span class="line">        System.out.println(<span class="string">"自增运算符前缀运算后a="</span>+a+<span class="string">",x="</span>+x);</span><br><span class="line">        System.out.println(<span class="string">"自增运算符后缀运算后b="</span>+b+<span class="string">",y="</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运算结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">自增运算符前缀运算后a=<span class="number">6</span>，x=<span class="number">12</span></span><br><span class="line">自增运算符后缀运算后b=<span class="number">6</span>，y=<span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>下表为Java支持的关系运算符,表格中的实例整数变量A的值为10，变量B的值为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th align="left">例子</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>检查如果两个操作数的值是否相等，如果相等则条件为真。</td>
<td align="left">（A==B)为假。</td>
</tr>
<tr>
<td>!=</td>
<td>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>
<td align="left">(A!=B)为真。</td>
</tr>
<tr>
<td>&gt;</td>
<td>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>
<td align="left">（A&gt;B)为假。</td>
</tr>
<tr>
<td>&lt;</td>
<td>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>
<td align="left">（A&lt;B)为真。</td>
</tr>
<tr>
<td>&gt;=</td>
<td>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>
<td align="left">（A&gt;=B)为假。</td>
</tr>
<tr>
<td>&lt;=</td>
<td>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>
<td align="left">（A&lt;=B)为真。</td>
</tr>
</tbody></table>
<p>代码demo</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">     System.out.println(<span class="string">"a == b = "</span> + (a == b) );</span><br><span class="line">     System.out.println(<span class="string">"a != b = "</span> + (a != b) );</span><br><span class="line">     System.out.println(<span class="string">"a &gt; b = "</span> + (a &gt; b) );</span><br><span class="line">     System.out.println(<span class="string">"a &lt; b = "</span> + (a &lt; b) );</span><br><span class="line">     System.out.println(<span class="string">"b &gt;= a = "</span> + (b &gt;= a) );</span><br><span class="line">     System.out.println(<span class="string">"b &lt;= a = "</span> + (b &lt;= a) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运算结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a == b = <span class="keyword">false</span></span><br><span class="line">a != b = <span class="keyword">true</span></span><br><span class="line">a &gt; b = <span class="keyword">false</span></span><br><span class="line">a &lt; b = <span class="keyword">true</span></span><br><span class="line">b &gt;= a = <span class="keyword">true</span></span><br><span class="line">b &lt;= a = <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A = <span class="number">0011</span> <span class="number">1100</span></span><br><span class="line">B = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">-----------------</span><br><span class="line">A&amp;B = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">A | B = <span class="number">0011</span> <span class="number">1101</span></span><br><span class="line">A ^ B = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">~A= <span class="number">1100</span> <span class="number">0011</span></span><br></pre></td></tr></table></figure>

<p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>＆</td>
<td>如果相对应位都是1，则结果为1，否则为0</td>
<td>（A＆B），得到12，即0000 1100</td>
</tr>
<tr>
<td>|</td>
<td>如果相对应位都是 0，则结果为 0，否则为 1</td>
<td>（A | B）得到61，即 0011 1101</td>
</tr>
<tr>
<td>^</td>
<td>如果相对应位值相同，则结果为0，否则为1</td>
<td>（A ^ B）得到49，即 0011 0001</td>
</tr>
<tr>
<td>〜</td>
<td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td>
<td>（〜A）得到-61，即1100 0011</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td>
<td>A &lt;&lt; 2得到240，即 1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td>
<td>A &gt;&gt; 2得到15即 1111</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>
<td>A&gt;&gt;&gt;2得到15即0000 1111</td>
</tr>
</tbody></table>
<p>代码demo</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">60</span>; <span class="comment">/* 60 = 0011 1100 */</span> </span><br><span class="line">     <span class="keyword">int</span> b = <span class="number">13</span>; <span class="comment">/* 13 = 0000 1101 */</span></span><br><span class="line">     <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">     c = a &amp; b;       <span class="comment">/* 12 = 0000 1100 */</span></span><br><span class="line">     System.out.println(<span class="string">"a &amp; b = "</span> + c );</span><br><span class="line">     c = a | b;       <span class="comment">/* 61 = 0011 1101 */</span></span><br><span class="line">     System.out.println(<span class="string">"a | b = "</span> + c );</span><br><span class="line">     c = a ^ b;       <span class="comment">/* 49 = 0011 0001 */</span></span><br><span class="line">     System.out.println(<span class="string">"a ^ b = "</span> + c );</span><br><span class="line">     c = ~a;          <span class="comment">/*-61 = 1100 0011 */</span></span><br><span class="line">     System.out.println(<span class="string">"~a = "</span> + c );</span><br><span class="line">     c = a &lt;&lt; <span class="number">2</span>;     <span class="comment">/* 240 = 1111 0000 */</span></span><br><span class="line">     System.out.println(<span class="string">"a &lt;&lt; 2 = "</span> + c );</span><br><span class="line">     c = a &gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 1111 */</span></span><br><span class="line">     System.out.println(<span class="string">"a &gt;&gt; 2  = "</span> + c );</span><br><span class="line">     c = a &gt;&gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 0000 1111 */</span></span><br><span class="line">     System.out.println(<span class="string">"a &gt;&gt;&gt; 2 = "</span> + c );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运算结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a &amp; b = <span class="number">12</span></span><br><span class="line">a | b = <span class="number">61</span></span><br><span class="line">a ^ b = <span class="number">49</span></span><br><span class="line">~a = -<span class="number">61</span></span><br><span class="line">a &lt;&lt; <span class="number">2</span> = <span class="number">240</span></span><br><span class="line">a &gt;&gt; <span class="number">2</span>  = <span class="number">15</span></span><br><span class="line">a &gt;&gt;&gt; <span class="number">2</span> = <span class="number">15</span></span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>
<td>(A &amp;&amp; B)为假。</td>
</tr>
<tr>
<td>| |</td>
<td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>
<td>(A | | B)为真。</td>
</tr>
<tr>
<td>！</td>
<td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>
<td>!(A &amp;&amp; B)为真。</td>
</tr>
</tbody></table>
<p>代码demo</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">boolean</span> a = <span class="keyword">true</span>;</span><br><span class="line">     <span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line">     System.out.println(<span class="string">"a &amp;&amp; b = "</span> + (a&amp;&amp;b));</span><br><span class="line">     System.out.println(<span class="string">"a || b = "</span> + (a||b) );</span><br><span class="line">     System.out.println(<span class="string">"!(a &amp;&amp; b) = "</span> + !(a &amp;&amp; b));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运算结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a &amp;&amp; b = <span class="keyword">false</span></span><br><span class="line">a || b = <span class="keyword">true</span></span><br><span class="line">!(a &amp;&amp; b) = <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p>
<p>代码demo</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuoJi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="keyword">boolean</span> b = (a&lt;<span class="number">4</span>)&amp;&amp;(a++&lt;<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"使用短路逻辑运算符的结果为"</span>+b);</span><br><span class="line">        System.out.println(<span class="string">"a的结果为"</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运算结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用短路逻辑运算符的结果为<span class="keyword">false</span></span><br><span class="line">a的结果为<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong> 该程序使用到了短路逻辑运算符(&amp;&amp;)，首先判断 a&lt;4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++&lt;10 的判断，所以 a 的值为 5。</p>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>下面是Java语言支持的赋值运算符：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>简单的赋值运算符，将右操作数的值赋给左侧操作数</td>
<td>C = A + B将把A + B得到的值赋给C</td>
</tr>
<tr>
<td>+ =</td>
<td>加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>
<td>C + = A等价于C = C + A</td>
</tr>
<tr>
<td>- =</td>
<td>减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>
<td>C - = A等价于C = C - A</td>
</tr>
<tr>
<td>* =</td>
<td>乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>
<td>C * = A等价于C = C * A</td>
</tr>
<tr>
<td>/ =</td>
<td>除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>
<td>C/= A,C与A同类型时等价于 C = C / A</td>
</tr>
<tr>
<td>(％)=</td>
<td>取模和赋值操作符,它把左操作数和右操作数取模后赋值给左操作数</td>
<td>C％= A等价于C = C％A</td>
</tr>
<tr>
<td>&lt;&lt;=</td>
<td>左移位赋值运算符</td>
<td>C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td>
</tr>
<tr>
<td>&gt;&gt;=</td>
<td>右移位赋值运算符</td>
<td>C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td>
</tr>
<tr>
<td>＆=</td>
<td>按位与赋值运算符</td>
<td>C＆= 2等价于C = C＆2</td>
</tr>
<tr>
<td>^=</td>
<td>按位异或赋值操作符</td>
<td>C ^ = 2等价于C = C ^ 2</td>
</tr>
<tr>
<td>| =</td>
<td>按位或赋值操作符</td>
<td>C | = 2等价于C = C | 2</td>
</tr>
</tbody></table>
<p>代码demo</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        c = a + b;</span><br><span class="line">        System.out.println(<span class="string">"c = a + b = "</span> + c );</span><br><span class="line">        c += a ;</span><br><span class="line">        System.out.println(<span class="string">"c += a  = "</span> + c );</span><br><span class="line">        c -= a ;</span><br><span class="line">        System.out.println(<span class="string">"c -= a = "</span> + c );</span><br><span class="line">        c *= a ;</span><br><span class="line">        System.out.println(<span class="string">"c *= a = "</span> + c );</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        c = <span class="number">15</span>;</span><br><span class="line">        c /= a ;</span><br><span class="line">        System.out.println(<span class="string">"c /= a = "</span> + c );</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        c = <span class="number">15</span>;</span><br><span class="line">        c %= a ;</span><br><span class="line">        System.out.println(<span class="string">"c %= a  = "</span> + c );</span><br><span class="line">        c &lt;&lt;= <span class="number">2</span> ;</span><br><span class="line">        System.out.println(<span class="string">"c &lt;&lt;= 2 = "</span> + c );</span><br><span class="line">        c &gt;&gt;= <span class="number">2</span> ;</span><br><span class="line">        System.out.println(<span class="string">"c &gt;&gt;= 2 = "</span> + c );</span><br><span class="line">        c &gt;&gt;= <span class="number">2</span> ;</span><br><span class="line">        System.out.println(<span class="string">"c &gt;&gt;= 2 = "</span> + c );</span><br><span class="line">        c &amp;= a ;</span><br><span class="line">        System.out.println(<span class="string">"c &amp;= a  = "</span> + c );</span><br><span class="line">        c ^= a ;</span><br><span class="line">        System.out.println(<span class="string">"c ^= a   = "</span> + c );</span><br><span class="line">        c |= a ;</span><br><span class="line">        System.out.println(<span class="string">"c |= a   = "</span> + c );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运算结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c = a + b = <span class="number">30</span></span><br><span class="line">c += a = <span class="number">40</span></span><br><span class="line">c -= a = <span class="number">30</span></span><br><span class="line">c *= a = <span class="number">300</span></span><br><span class="line">c /= a = <span class="number">1</span></span><br><span class="line">c %= a  = <span class="number">5</span></span><br><span class="line">c &lt;&lt;= <span class="number">2</span> = <span class="number">20</span></span><br><span class="line">c &gt;&gt;= <span class="number">2</span> = <span class="number">5</span></span><br><span class="line">c &gt;&gt;= <span class="number">2</span> = <span class="number">1</span></span><br><span class="line">c &amp;= a = <span class="number">0</span></span><br><span class="line">c ^= a = <span class="number">10</span></span><br><span class="line">c |= a = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">variable x = (expression) ? value <span class="keyword">if</span> <span class="keyword">true</span> : value <span class="keyword">if</span> <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<p>代码demo</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> a , b;</span><br><span class="line">      a = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">1</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">"Value of b is : "</span> +  b );</span><br><span class="line">      <span class="comment">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">10</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">"Value of b is : "</span> + b );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运算结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Value of b is : <span class="number">30</span></span><br><span class="line">Value of b is : <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h2 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h2><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>
<p>instanceof运算符使用格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">( Object reference variable ) <span class="keyword">instanceof</span>  (<span class="class"><span class="keyword">class</span>/<span class="title">interface</span> <span class="title">type</span>)</span></span><br></pre></td></tr></table></figure>

<p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p>
<p>下面是一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = <span class="string">"James"</span>;</span><br><span class="line"><span class="keyword">boolean</span> result = name <span class="keyword">instanceof</span> String; <span class="comment">// 由于 name 是 String 类型，所以返回真</span></span><br></pre></td></tr></table></figure>

<p>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p>
<p>看下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Vehicle a = <span class="keyword">new</span> Car();</span><br><span class="line">      <span class="keyword">boolean</span> result =  a <span class="keyword">instanceof</span> Car;</span><br><span class="line">      System.out.println( result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运算结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h2 id="Java运算符优先级"><a href="#Java运算符优先级" class="headerlink" title="Java运算符优先级"></a>Java运算符优先级</h2><p>当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。</p>
<p>例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。</p>
<p>再如，x = 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。</p>
<p>下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>操作符</th>
<th>关联性</th>
</tr>
</thead>
<tbody><tr>
<td>后缀</td>
<td>() [] . (点操作符)</td>
<td>左到右</td>
</tr>
<tr>
<td>一元</td>
<td>+ + - ！〜</td>
<td>从右到左</td>
</tr>
<tr>
<td>乘性</td>
<td>* /％</td>
<td>左到右</td>
</tr>
<tr>
<td>加性</td>
<td>+ -</td>
<td>左到右</td>
</tr>
<tr>
<td>移位</td>
<td>&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td>
<td>左到右</td>
</tr>
<tr>
<td>关系</td>
<td>&gt;&gt; = &lt;&lt; =</td>
<td>左到右</td>
</tr>
<tr>
<td>相等</td>
<td>== !=</td>
<td>左到右</td>
</tr>
<tr>
<td>按位与</td>
<td>＆</td>
<td>左到右</td>
</tr>
<tr>
<td>按位异或</td>
<td>^</td>
<td>左到右</td>
</tr>
<tr>
<td>按位或</td>
<td>|</td>
<td>左到右</td>
</tr>
<tr>
<td>逻辑与</td>
<td>&amp;&amp;</td>
<td>左到右</td>
</tr>
<tr>
<td>逻辑或</td>
<td>| |</td>
<td>左到右</td>
</tr>
<tr>
<td>条件</td>
<td>？：</td>
<td>从右到左</td>
</tr>
<tr>
<td>赋值</td>
<td>= + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | =</td>
<td>从右到左</td>
</tr>
<tr>
<td>逗号</td>
<td>，</td>
<td>左到右</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>4.Java</category>
        <category>1.Java基础</category>
      </categories>
      <tags>
        <tag>3.Java</tag>
        <tag>1.Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>5.Java数组</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4.Java/5.java%E6%95%B0%E7%BB%84.html</url>
    <content><![CDATA[<p>数组，顾名思义数据类型的组，它本身也属于一种引用数据类型，用于存储同一类型的值，然后通过整型下标，对某一具体值进行访问。</p>
<h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><blockquote>
<p>案例引用：作为一名数学老师，要对班上五十名学生数学成绩进行输入</p>
</blockquote>
<p>按照我们之前学习过的方法，我们需要定义五十个学生分别定义一个变量来进行值存储</p>
<h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名;		<span class="comment">//java特有格式</span></span><br><span class="line">数据类型 数组名[];		<span class="comment">//C\C++等共有形式</span></span><br></pre></td></tr></table></figure>

<p>demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a;</span><br><span class="line"><span class="keyword">double</span> b[];</span><br><span class="line"><span class="keyword">char</span>[] c;</span><br><span class="line">String[] strArray;</span><br></pre></td></tr></table></figure>

<p>声明了数组，但其实数组还不能直接使用，我们都知道声明是为了在内存中开辟一个空间出来，我们现在只告诉了计算机我们要声明一个数组，但是并没有告诉它需要多大空间。</p>
<h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*先创建后声明*/</span></span><br><span class="line">数组名 = <span class="keyword">new</span> 数据类型[数组长度];</span><br><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];	<span class="comment">//创建一个长度为10的整型数组arr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建的同时声明数组*/</span></span><br><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[数组长度]</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];	<span class="comment">//创建一个长度为10的整型数组arr</span></span><br></pre></td></tr></table></figure>

<p>完成创建之后，数组就会分配一段足够的连续的内存空间，创建之后就不能改变数组的大小</p>
<h2 id="数组默认值"><a href="#数组默认值" class="headerlink" title="数组默认值"></a>数组默认值</h2><p> 我们在创建完变量和常量之后，是需要给它们赋值之后才能使用的，而数组则是有默认值的，因为数组本身其实是对象</p>
<ul>
<li>数字数组所有元素默认值为0</li>
<li>boolean数组所有元素默认值为false</li>
<li>对象数组所有元素默认值为null</li>
</ul>
<h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><p>在Java中提供了一种创建数组对象并同时进行赋值的简化书写形式叫做数组初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,元素<span class="number">4</span>,...,&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>通过数组初始化创建的数组，数组的长度就是初始化时元素的个数，例如上述代码的创建空间大小如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span>[<span class="number">9</span>];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Java中，允许数组长度为0，在编写一个结果为数组的方法时，如果碰巧结果为空，则这种语法形式就显得非常有用，此时可以创建一个长度为0的数组</p>
<p>注意：长度为0与null不同</p>
</blockquote>
<h3 id="匿名数组"><a href="#匿名数组" class="headerlink" title="匿名数组"></a>匿名数组</h3><p>这种表示法可以不创建新变量就将创建一个新的数组并利用括号内提供的值进行初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">12</span>,<span class="number">54</span>,<span class="number">87</span>,<span class="number">35</span>,<span class="number">44</span>&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="数组元素的引用"><a href="#数组元素的引用" class="headerlink" title="数组元素的引用"></a>数组元素的引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组名[下标];</span><br></pre></td></tr></table></figure>

<p>注意：下标序号是从0开始</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200219111254521.png" alt="image-20200219111254521"></p>
<h2 id="数组长度-length"><a href="#数组长度-length" class="headerlink" title="数组长度.length"></a>数组长度.length</h2><p>length属性表示数组的长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arr.length;</span><br></pre></td></tr></table></figure>

<p>案例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] student = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];<span class="comment">//为了演示方便，50个省略为5个</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;student.length;i++)&#123;</span><br><span class="line">			System.out.println(<span class="string">"请输入学生成绩"</span>);</span><br><span class="line">			<span class="comment">//输入学生成绩</span></span><br><span class="line">			student[i] = sc.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> b:student)&#123;</span><br><span class="line">			System.out.println(b);</span><br><span class="line">			<span class="comment">//打印所有学生成绩  //增强for循环</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/*获取几号学生成绩*/</span></span><br><span class="line">		System.out.print(<span class="string">"获取几号学生成绩:"</span>);</span><br><span class="line">		<span class="keyword">int</span> no = sc.nextInt();</span><br><span class="line">		System.out.println(no+<span class="string">"号学生成绩为"</span>+student[no-<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>知识回顾：</p>
<p><a href="https://kinghtxg.github.io/archives/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/1.Java%E5%9F%BA%E7%A1%80/4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5.html#Java-%E5%A2%9E%E5%BC%BA-for-%E5%BE%AA%E7%8E%AF" target="_blank" rel="noopener">增强for循环</a></p>
<p><a href="https://www.runoob.com/java/java-scanner-class.html" target="_blank" rel="noopener">Java  Scanner 类</a></p>
</blockquote>
<hr>
<h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><p>二维数组也是存放相同数据类型的数据，可以看成是由多个一维数组嵌套组成。</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200220212200332.png" alt="image-20200220212200332"></p>
<blockquote>
<p>案例引用：作为一名班主任老师，要对班上五十名学生语文、数学、外语成绩进行输入</p>
</blockquote>
<h2 id="声明数组-1"><a href="#声明数组-1" class="headerlink" title="声明数组"></a>声明数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[][] 数组名；</span><br><span class="line">数据类型 数组名[][];</span><br><span class="line">数据类型[] 数组名[];</span><br></pre></td></tr></table></figure>

<p>demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明int类型的二维数组</span></span><br><span class="line"><span class="keyword">int</span>[][] intArray;</span><br><span class="line"><span class="comment">//声明float类型的二维数组</span></span><br><span class="line"><span class="keyword">float</span> floatArray[][];</span><br><span class="line"><span class="comment">//声明double类型的二维数组</span></span><br><span class="line"><span class="keyword">double</span>[] doubleArray[];</span><br></pre></td></tr></table></figure>

<h2 id="创建二维数组"><a href="#创建二维数组" class="headerlink" title="创建二维数组"></a>创建二维数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*创建一个三行三列的int类型的数组*/</span></span><br><span class="line"><span class="comment">/*声明int类型的二维数组（先声明，后创建）*/</span></span><br><span class="line"><span class="keyword">int</span>[][] intArray;</span><br><span class="line">intArray=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">/*声明的数组的同时进行创建*/</span></span><br><span class="line"><span class="keyword">int</span>[][] intArray=intArray=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">/*创建数组的时候，可以只指定行数</span></span><br><span class="line"><span class="comment">列数并没有指定，每行相当于一个一维数组，需要分别创建,每一行的数据数量是可以不相同的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">float</span>[][] floatArray=newfloat[<span class="number">3</span>][];</span><br><span class="line">floatArray[<span class="number">0</span>]=newfloat[<span class="number">3</span>];<span class="comment">//第一行有三列</span></span><br><span class="line">floatArray[<span class="number">1</span>]=newfloat[<span class="number">4</span>];<span class="comment">//第二行有四列</span></span><br><span class="line">floatArray[<span class="number">2</span>]=newfloat[<span class="number">5</span>];<span class="comment">//第三行有5列</span></span><br></pre></td></tr></table></figure>

<h2 id="数组元素的引用-1"><a href="#数组元素的引用-1" class="headerlink" title="数组元素的引用"></a>数组元素的引用</h2><p>与一维数组相似，行列的index值均从0开始</p>
<p>如：已知一个三行三列的整型二维数组intArray，它的第三行第二列元素表示为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">intArray[<span class="number">2</span>][<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<h2 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h2><p>与一维数组类似，创建的同时为数组元素赋值，即为数组的初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] num=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<p>创建了一个三行三列二维数组。num[1][2]的值为6</p>
<h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><p>多维数组，通常使用for循环嵌套的方式逐层打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="comment">//初始化一个二维数组</span></span><br><span class="line">		<span class="keyword">int</span>[][] num1=&#123;&#123;<span class="number">78</span>,<span class="number">98</span>&#125;,&#123;<span class="number">65</span>,<span class="number">75</span>,<span class="number">63</span>&#125;,&#123;<span class="number">98</span>&#125;&#125;;</span><br><span class="line">		<span class="comment">//循环输出二维数组的内容</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num1.length;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num1[i].length;j++)&#123;</span><br><span class="line">				System.out.print(num1[i][j]+<span class="string">"          "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="数组的计算"><a href="#数组的计算" class="headerlink" title="数组的计算"></a>数组的计算</h1><h2 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h2><p>还记得之前说过吗？数组是引用数据类型。</p>
<p>在Java中允许将一个数组变量拷贝给另一个数组变量，但是，两个变量并不是复制，而是引用，对于这两个数组变量而言，他们指向了同一块内存空间，就会导致一个问题，如果一个数组的值发生改变，而另外一个数组会随之改变</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200220200230995.png" alt="image-20200220200230995"></p>
<p>案例demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">		<span class="keyword">int</span>[] b = a;	<span class="comment">//b数组拷贝的a</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> c: a) &#123;	<span class="comment">//打印a</span></span><br><span class="line">			System.out.print(c);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();   <span class="comment">//换行</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> d: b) &#123;	<span class="comment">//打印b</span></span><br><span class="line">			System.out.print(d);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();   <span class="comment">//换行</span></span><br><span class="line">		System.out.println(<span class="string">"修改b[3]"</span>);</span><br><span class="line">		b[<span class="number">3</span>] = <span class="number">7</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> c: a) &#123;	<span class="comment">//打印修改后a</span></span><br><span class="line">			System.out.print(c);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();   <span class="comment">//换行</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> d: b) &#123;	<span class="comment">//打印修改后b</span></span><br><span class="line">			System.out.print(d);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们只修改了b第四个元素的值，但打印结果显示a也随着改变了</p>
<h3 id="Arrays-copyOf"><a href="#Arrays-copyOf" class="headerlink" title="Arrays.copyOf"></a>Arrays.copyOf</h3><p>如果希望将一个数组变量的所有值拷贝到一个新的数组中，就需要用到Arrays类的copyOf方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">		<span class="keyword">int</span>[] b = Arrays.copyOf(a,a.length);    <span class="comment">//第二个参数为新数组长度</span></span><br><span class="line">		a[<span class="number">3</span>] = <span class="number">7</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x:a) &#123;</span><br><span class="line">			System.out.print(x+<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">""</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x:b) &#123;</span><br><span class="line">			System.out.print(x+<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果新参数长度大于老参数，数组元素为数值型，那么多余的元素将会被赋值为0，数组元素是布尔型，则将赋值false，如果新参数长度小于老参数，则只拷贝前面的数据元素。</p>
<h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>这里介绍一下在程序当中比较经典的排序算法，叫做冒泡排序。</p>
<ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。 </li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较</li>
</ul>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/bf096b63f6246b60965c2634e6f81a4c510fa224.jpg" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//冒泡排序</span></span><br><span class="line">		<span class="keyword">int</span>[] a=&#123;<span class="number">34</span>,<span class="number">53</span>,<span class="number">12</span>,<span class="number">32</span>,<span class="number">56</span>,<span class="number">17</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">"排序前的数组元素为:"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> n:a)&#123;</span><br><span class="line">			System.out.print(n+<span class="string">"     "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="keyword">int</span> temp;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">			<span class="comment">//内重循环控制每趟排序</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">					temp=a[j];</span><br><span class="line">					a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">					a[j+<span class="number">1</span>]=temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"从小到大排序后的数组元素为："</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> n:a)&#123;</span><br><span class="line">			System.out.print(n+<span class="string">"     "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Arrays-sort"><a href="#Arrays-sort" class="headerlink" title="Arrays.sort"></a>Arrays.sort</h3><p>冒泡排序是经典，但却实也用的很少，而且Java本身也提供方法对数组进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] a=&#123;<span class="number">34</span>,<span class="number">53</span>,<span class="number">12</span>,<span class="number">32</span>,<span class="number">56</span>,<span class="number">17</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">"排序前的数组元素为:"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> n:a)&#123;</span><br><span class="line">			System.out.print(n+<span class="string">"     "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		Arrays.sort(a);	<span class="comment">//从小到大排序</span></span><br><span class="line">		System.out.println(<span class="string">"从小到大排序后的数组元素为："</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> n:a)&#123;</span><br><span class="line">			System.out.print(n+<span class="string">"     "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>4.Java</category>
        <category>1.Java基础</category>
      </categories>
      <tags>
        <tag>3.Java</tag>
        <tag>1.Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>6.Java方法</title>
    <url>/archives/1.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4.Java/6.Java%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<p>我们即将开始了解面向对象编程的核心——面向对象。但是再讲之前，在基础结构中有个东西一直没有讲到，那就是方法</p>
<h1 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法?"></a>什么是方法?</h1><p>其实基本的方法我们大家都已经接触过，那就是主方法main</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>我们都知道他是一个程序的入口，除此之外，我们还接触了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">sc.nextInt();</span><br><span class="line">sc.next();</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure>

<p>这些都是方法，我们可以看到他们都有属于自己的功能。</p>
<p>总结：所谓方法，就是用来解决一类问题的代码有序组合，或者说是一个功能模块，来保证<a href="https://baike.baidu.com/item/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99/22718063" target="_blank" rel="noopener">单一功能原则</a></p>
<hr>
<h1 id="方法声明"><a href="#方法声明" class="headerlink" title="方法声明"></a>方法声明</h1><p>语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符 返回类型 方法名(参数列表)&#123;</span><br><span class="line">	方法体;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>public和static属于访问修饰符，他表示这个方法是一个公开的静态的方法，关于访问修饰符，在下一章面向对象中会详细讲解。</p>
<p>void属于返回类型，void的意思是我不返回任何值，返回类型可以是任何的数据类型，如果有返回值需要在方法体内使用return进行返回某一个量，这个量的类型必须和返回类型相同</p>
<p>然后main就是方法名，方法名遵循变量的命名规则，括号内是参数列表，大括号就是具体代码构成的方法体了。</p>
<hr>
<h1 id="方法分类"><a href="#方法分类" class="headerlink" title="方法分类"></a>方法分类</h1><h2 id="无参无返回值方法"><a href="#无参无返回值方法" class="headerlink" title="无参无返回值方法"></a>无参无返回值方法</h2><p>案例导入：</p>
<p><img src="https://skystarry-1251157247.cos.ap-chengdu.myqcloud.com/img/image-20200220154927210.png" alt=""></p>
<p>案例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//打印输出星号的方法</span></span><br><span class="line">		System.out.println(<span class="string">"*******************"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		MethodDemo myMethod = <span class="keyword">new</span> MethodDemo();</span><br><span class="line">        <span class="comment">//创建MethodDemo类的对象myMethod</span></span><br><span class="line">		myMethod.printStar();</span><br><span class="line">        <span class="comment">//使用对象调用类里的方法</span></span><br><span class="line">		System.out.println(<span class="string">"欢迎来到Java的世界"</span>);</span><br><span class="line">		myMethod.printStar();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们把创建了一个无参无返回值的方法printStar，方法内语句是打印一排星号</p>
<p>应用这个方法首先需要用方法所在类去创建一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MethodDemo myMethod = <span class="keyword">new</span> MethodDemo();</span><br></pre></td></tr></table></figure>

<p>而应用的时候，就再调用，调用格式：对象名.方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">myMethod.printStar();</span><br></pre></td></tr></table></figure>

<h2 id="无参带返回值方法"><a href="#无参带返回值方法" class="headerlink" title="无参带返回值方法"></a>无参带返回值方法</h2><blockquote>
<p>案例导入：求长方形面积的方法，并返回</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">area</span><span class="params">()</span></span>&#123;  <span class="comment">//因为会返回整型变量所以变为int</span></span><br><span class="line">		<span class="keyword">int</span> lenght = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> width = <span class="number">5</span>;</span><br><span class="line">		<span class="keyword">int</span> area = lenght * width;</span><br><span class="line">		<span class="keyword">return</span> area; <span class="comment">//返回area的值</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">			MethodDemo myMethdemo = <span class="keyword">new</span> MethodDemo();   <span class="comment">//声明MethodDemo类的对象</span></span><br><span class="line">			System.out.println(myMethdemo.area());  <span class="comment">//打印调用area</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的输出是area方法将值返回到了主方法之后，主方法通过输出语句输出的。</p>
<h2 id="带参无返回值方法"><a href="#带参无返回值方法" class="headerlink" title="带参无返回值方法"></a>带参无返回值方法</h2><blockquote>
<p>案例导入：求长方形面积的方法，需要输入长和宽</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">area</span><span class="params">(<span class="keyword">float</span> a,<span class="keyword">float</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">float</span> lenght = a;</span><br><span class="line">		<span class="keyword">float</span> width = b;</span><br><span class="line">		<span class="keyword">float</span> area = lenght * width;</span><br><span class="line">		System.out.println(area);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">			MethodDemo myMethdemo = <span class="keyword">new</span> MethodDemo();   <span class="comment">//声明MethodDemo类的对象</span></span><br><span class="line">			myMethdemo.area(<span class="number">17.1f</span>,<span class="number">19.2f</span>);   <span class="comment">//传入值为float类型</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="带参带返回值方法"><a href="#带参带返回值方法" class="headerlink" title="带参带返回值方法"></a>带参带返回值方法</h2><blockquote>
<p>案例导入：求长方形面积的方法，需要输入长和宽，并返回</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">area</span><span class="params">(<span class="keyword">float</span> a,<span class="keyword">float</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">float</span> lenght = a;</span><br><span class="line">		<span class="keyword">float</span> width = b;</span><br><span class="line">		<span class="keyword">float</span> area = lenght * width;</span><br><span class="line">		<span class="keyword">return</span> area; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">			MethodDemo myMethdemo = <span class="keyword">new</span> MethodDemo();   <span class="comment">//声明MethodDemo类的对象</span></span><br><span class="line">			<span class="keyword">float</span> area = myMethdemo.area(<span class="number">17.1f</span>,<span class="number">19.2f</span>);   <span class="comment">//传入值为float类型</span></span><br><span class="line">			System.out.println(area);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="数组作为方法参数"><a href="#数组作为方法参数" class="headerlink" title="数组作为方法参数"></a>数组作为方法参数</h1><p>使用数组作为方法参数其实适合前面大同小异</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ArrayMethod</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">		<span class="comment">//输出打印数组值</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> a:arr)&#123;</span><br><span class="line">			System.out.print(a+<span class="string">"    "</span>);<span class="comment">//输出a并加上空格</span></span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();   <span class="comment">//换行</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		MethodDemo am = <span class="keyword">new</span> MethodDemo();</span><br><span class="line">		<span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">		am.ArrayMethod(arr);<span class="comment">//直接传入数组arr</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>案例引入：找到数组的值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] search(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> a)&#123;</span><br><span class="line">		<span class="keyword">int</span>[] nu=<span class="keyword">new</span> <span class="keyword">int</span>[arr.length];   <span class="comment">//创建一个长度与arr相同的数组存放相同的下标值</span></span><br><span class="line">		<span class="keyword">int</span> nusub = <span class="number">0</span>;<span class="comment">//初始化nu的下标</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i] == a)&#123;     <span class="comment">//数组里值是否是查找值</span></span><br><span class="line">				nu[nusub]=i;    <span class="comment">//将所有与a相同值的下标存放到nu里</span></span><br><span class="line">				nusub++;    <span class="comment">//nu下标自加</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> nu;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>,<span class="number">48</span>,<span class="number">68</span>,<span class="number">7</span>,<span class="number">54</span>,<span class="number">8</span>,<span class="number">67</span>,<span class="number">68</span>,<span class="number">15</span>,<span class="number">68</span>&#125;;   <span class="comment">//待查询数组</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> a = sc.nextInt();   <span class="comment">//输入查询数</span></span><br><span class="line">		MethodDemo md = <span class="keyword">new</span> MethodDemo();</span><br><span class="line">		<span class="keyword">int</span>[] nu = md.search(arr,a);    <span class="comment">//传入查询数组和查询数</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> x:nu)&#123;</span><br><span class="line">			System.out.print(x+<span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>我们可以看到方法的分类有很多，我们通常会遇到需要传不同类型的或者说是否传值的情况，这时候需要不同的处理方式，方法重载的重要性就突出了</p>
<blockquote>
<p>方法重载：方法名相同，参数列表不同</p>
</blockquote>
<p>案例Demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//求两个int类型数的和</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m+n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//求两个double类型数的和</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">plus</span><span class="params">(<span class="keyword">double</span> m,<span class="keyword">double</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m+n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//求数组元素的累加和</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">			sum=sum+arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> m=<span class="number">5</span>,n=<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">		MathDemo mathDemo=<span class="keyword">new</span> MathDemo();</span><br><span class="line">		System.out.println(<span class="string">"int类型的和："</span>+mathDemo.plus(m, n));</span><br><span class="line">		System.out.println(<span class="string">"double类型的和："</span>+mathDemo.plus(<span class="number">5.6</span>, <span class="number">7.8</span>));</span><br><span class="line">		System.out.println(<span class="string">"数组元素的和："</span>+mathDemo.plus(arr));</span><br><span class="line">        <span class="comment">//可以看到，因为传递参数的不同，导致他们调用的方法其实不同</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="方法传值"><a href="#方法传值" class="headerlink" title="方法传值"></a>方法传值</h1><h2 id="基本数据类型传值"><a href="#基本数据类型传值" class="headerlink" title="基本数据类型传值"></a>基本数据类型传值</h2><p>在研究这个问题之前，我们先看一串代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangeDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//交换方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> temp;</span><br><span class="line">		System.out.println(<span class="string">"交换前：a="</span>+a+<span class="string">",b="</span>+b);</span><br><span class="line">		temp=a;a=b;b=temp;</span><br><span class="line">		System.out.println(<span class="string">"交换后：a="</span>+a+<span class="string">",b="</span>+b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swapTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> m=<span class="number">4</span>,n=<span class="number">5</span>;</span><br><span class="line">		System.out.println(<span class="string">"交换前：m="</span>+m+<span class="string">",n="</span>+n);</span><br><span class="line">		swap(m, n);</span><br><span class="line">		System.out.println(<span class="string">"交换后：m="</span>+m+<span class="string">",n="</span>+n);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ExchangeDemo ed=<span class="keyword">new</span> ExchangeDemo();</span><br><span class="line">		ed.swapTest();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">交换前：m=<span class="number">4</span>,n=<span class="number">5</span></span><br><span class="line">交换前：a=<span class="number">4</span>,b=<span class="number">5</span></span><br><span class="line">交换后：a=<span class="number">5</span>,b=<span class="number">4</span></span><br><span class="line">交换后：m=<span class="number">4</span>,n=<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>我们在定义mn的时候，系统首先在内存中开辟了m和n空间，把4存放在了m中，把n存放在了5中，当进行方法调用的时候，把mn的值传到了变量ab中，这时候其实只是把两个值传了过去，ab是否进行交换，是否进行操作，并不影响原本的mn。</p>
<h2 id="数组的传值"><a href="#数组的传值" class="headerlink" title="数组的传值"></a>数组的传值</h2><p>而数组的传值又会不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangeDemo1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		n++;</span><br><span class="line">		System.out.println(<span class="string">"方法中n="</span>+n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n=<span class="number">10</span>;</span><br><span class="line">		System.out.println(<span class="string">"方法调用前n的值："</span>+n);</span><br><span class="line">		ExchangeDemo1 ed1=<span class="keyword">new</span> ExchangeDemo1();</span><br><span class="line">		ed1.add(n);</span><br><span class="line">		System.out.println(<span class="string">"方法调用后n的值："</span>+n);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">方法调用前数组a1的元素为：</span><br><span class="line"><span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span>     </span><br><span class="line">数组a的元素为：</span><br><span class="line"><span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">15</span>     <span class="number">5</span>     </span><br><span class="line">方法调用后数组a1的元素为：</span><br><span class="line"><span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">15</span>     <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>我们之前说过数组是引用数据类型，在传递数组的时候，其实是将空间地址传了过去，而空间还是一样的空间，空间存放的值一旦发生改变，就会影响到其他引用同一地址空间的数组</p>
<hr>
<h1 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h1><p>在很多时候，我们并不确定要接收多少个参数，这时候可变参数列表就起作用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... n)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>这就是一个基本的可见参数列表，这里int… n表示的是输入未知个数的整型</p>
<blockquote>
<p>注意：一个方法里只能有一个可变参数列表</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//求和</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i:n)&#123;</span><br><span class="line">			sum=sum+i;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ArgsDemo ad=<span class="keyword">new</span> ArgsDemo();</span><br><span class="line">		ad.sum(<span class="number">1</span>);</span><br><span class="line">		ad.sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">		ad.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而且可变参数列表在传入之后，会被当作一个数组处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo1</span> </span>&#123;</span><br><span class="line">	<span class="comment">//查找</span></span><br><span class="line">    <span class="comment">//在混合其他参数使用的时候，可变参数列表只能放在参数列的最后</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span>... a)</span></span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> a1:a)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a1==n)&#123;</span><br><span class="line">				flag=<span class="keyword">true</span>;<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			System.out.println(<span class="string">"找到了！"</span>+n);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"没找到！"</span>+n);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ArgsDemo1 ad1=<span class="keyword">new</span> ArgsDemo1();</span><br><span class="line">		ad1.search(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">		<span class="keyword">int</span>[] a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">		ad1.search(<span class="number">3</span>, a);	<span class="comment">//可以将数组传递给可变参数列表</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并且在进行重载操作的时候，可变参数列表会被当作数组，所以以下定义会被计算机认为是重复操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span>... a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span>[] a)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：数组能够传入可变参数列表，而多个数却不能传入数组</p>
</blockquote>
<h2 id="方法重载-1"><a href="#方法重载-1" class="headerlink" title="方法重载"></a>方法重载</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo3</span> </span>&#123;</span><br><span class="line">	<span class="comment">//可变参数列表所在的方法是最后被访问的。</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	public int plus(int a,int b)&#123;</span></span><br><span class="line"><span class="comment">		System.out.println("不带可变参数的方法被调用！");</span></span><br><span class="line"><span class="comment">		return a+b;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span>... a)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> n:a)&#123;</span><br><span class="line">			sum=sum+n;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"带可变参数的方法被调用！"</span>);</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ArgsDemo3 ad=<span class="keyword">new</span> ArgsDemo3();</span><br><span class="line">		System.out.println(<span class="string">"和为："</span>+ad.plus(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>1.程序语言</category>
        <category>4.Java</category>
        <category>1.Java基础</category>
      </categories>
      <tags>
        <tag>3.Java</tag>
        <tag>1.Java基础</tag>
      </tags>
  </entry>
</search>
